
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006080  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006250  08006250  00007250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006298  08006298  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006298  08006298  00007298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a0  080062a0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a0  080062a0  000072a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062a4  080062a4  000072a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080062a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c30  20000060  08006308  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c90  08006308  00008c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6b1  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003803  00000000  00000000  00023741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00026f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001259  00000000  00000000  000286a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bae  00000000  00000000  00029901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba45  00000000  00000000  0002d4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd578  00000000  00000000  00048ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012646c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066cc  00000000  00000000  001264b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0012cb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006238 	.word	0x08006238

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006238 	.word	0x08006238

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <LCD_Command_Send>:

#define ADDR 0x27 << 1
extern I2C_HandleTypeDef hi2c1;

void LCD_Command_Send(uint8_t command)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	uint8_t data[4];
	uint8_t lower, upper;

	lower = ((command << 4) & 0xF0);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	011b      	lsls	r3, r3, #4
 800050e:	73fb      	strb	r3, [r7, #15]
	upper = (command & 0xF0);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	f023 030f 	bic.w	r3, r3, #15
 8000516:	73bb      	strb	r3, [r7, #14]

	data[0] = upper | 0x0C;
 8000518:	7bbb      	ldrb	r3, [r7, #14]
 800051a:	f043 030c 	orr.w	r3, r3, #12
 800051e:	b2db      	uxtb	r3, r3
 8000520:	723b      	strb	r3, [r7, #8]
	data[1] = upper | 0x08;
 8000522:	7bbb      	ldrb	r3, [r7, #14]
 8000524:	f043 0308 	orr.w	r3, r3, #8
 8000528:	b2db      	uxtb	r3, r3
 800052a:	727b      	strb	r3, [r7, #9]
	data[2] = lower | 0x0C;
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	f043 030c 	orr.w	r3, r3, #12
 8000532:	b2db      	uxtb	r3, r3
 8000534:	72bb      	strb	r3, [r7, #10]
	data[3] = lower | 0x08;
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2db      	uxtb	r3, r3
 800053e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, ADDR, data, 4, HAL_MAX_DELAY);
 8000540:	f107 0208 	add.w	r2, r7, #8
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2304      	movs	r3, #4
 800054c:	214e      	movs	r1, #78	@ 0x4e
 800054e:	4805      	ldr	r0, [pc, #20]	@ (8000564 <LCD_Command_Send+0x64>)
 8000550:	f001 f87e 	bl	8001650 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000554:	2002      	movs	r0, #2
 8000556:	f000 fc83 	bl	8000e60 <HAL_Delay>
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000007c 	.word	0x2000007c

08000568 <LCD_Initialize>:

void LCD_Initialize(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for the LCD to power up
 800056c:	2032      	movs	r0, #50	@ 0x32
 800056e:	f000 fc77 	bl	8000e60 <HAL_Delay>

    // Function set: 8-bit mode (3 times)
    LCD_Command_Send(0x30);
 8000572:	2030      	movs	r0, #48	@ 0x30
 8000574:	f7ff ffc4 	bl	8000500 <LCD_Command_Send>
    HAL_Delay(5);
 8000578:	2005      	movs	r0, #5
 800057a:	f000 fc71 	bl	8000e60 <HAL_Delay>
    LCD_Command_Send(0x30);
 800057e:	2030      	movs	r0, #48	@ 0x30
 8000580:	f7ff ffbe 	bl	8000500 <LCD_Command_Send>
    HAL_Delay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fc6b 	bl	8000e60 <HAL_Delay>
    LCD_Command_Send(0x30);
 800058a:	2030      	movs	r0, #48	@ 0x30
 800058c:	f7ff ffb8 	bl	8000500 <LCD_Command_Send>
    HAL_Delay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fc65 	bl	8000e60 <HAL_Delay>

    // Set to 4-bit mode
    LCD_Command_Send(0x20);
 8000596:	2020      	movs	r0, #32
 8000598:	f7ff ffb2 	bl	8000500 <LCD_Command_Send>
    HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fc5f 	bl	8000e60 <HAL_Delay>

    // Function set: 4-bit, 2 lines, 5x8 dots
    LCD_Command_Send(0x28);
 80005a2:	2028      	movs	r0, #40	@ 0x28
 80005a4:	f7ff ffac 	bl	8000500 <LCD_Command_Send>
    HAL_Delay(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fc59 	bl	8000e60 <HAL_Delay>

    // Display ON, Cursor OFF
    LCD_Command_Send(0x0C);
 80005ae:	200c      	movs	r0, #12
 80005b0:	f7ff ffa6 	bl	8000500 <LCD_Command_Send>
    HAL_Delay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fc53 	bl	8000e60 <HAL_Delay>

    // Clear Display
    LCD_Command_Send(0x01);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff ffa0 	bl	8000500 <LCD_Command_Send>
    HAL_Delay(2);
 80005c0:	2002      	movs	r0, #2
 80005c2:	f000 fc4d 	bl	8000e60 <HAL_Delay>

    // Entry Mode Set: Increment cursor
    LCD_Command_Send(0x06);
 80005c6:	2006      	movs	r0, #6
 80005c8:	f7ff ff9a 	bl	8000500 <LCD_Command_Send>
    HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fc47 	bl	8000e60 <HAL_Delay>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <LCD_Data_Send>:


void LCD_Data_Send(uint8_t data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[4];
	uint8_t lower, upper;

	lower = ((data << 4) & 0xF0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73fb      	strb	r3, [r7, #15]
	upper = (data & 0xF0);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f023 030f 	bic.w	r3, r3, #15
 80005ee:	73bb      	strb	r3, [r7, #14]

	data_t[0] = upper | 0x0D;
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = upper | 0x09;
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]
	data_t[2] = lower | 0x0D;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = lower | 0x09;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, ADDR, data_t, 4, HAL_MAX_DELAY);
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2304      	movs	r3, #4
 8000624:	214e      	movs	r1, #78	@ 0x4e
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <LCD_Data_Send+0x64>)
 8000628:	f001 f812 	bl	8001650 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800062c:	2002      	movs	r0, #2
 800062e:	f000 fc17 	bl	8000e60 <HAL_Delay>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000007c 	.word	0x2000007c

08000640 <LCD_String_Send>:

void LCD_String_Send(char *str)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	while(*str)
 8000648:	e006      	b.n	8000658 <LCD_String_Send+0x18>
	{
		LCD_Data_Send(*str++);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffc0 	bl	80005d8 <LCD_Data_Send>
	while(*str)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f4      	bne.n	800064a <LCD_String_Send+0xa>
	}
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <LCD_Cursor_Set>:

void LCD_Cursor_Set(uint8_t row, uint8_t column)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	460a      	mov	r2, r1
 8000676:	71fb      	strb	r3, [r7, #7]
 8000678:	4613      	mov	r3, r2
 800067a:	71bb      	strb	r3, [r7, #6]
	uint8_t addr;
	switch(row)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d81a      	bhi.n	80006b8 <LCD_Cursor_Set+0x4c>
 8000682:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <LCD_Cursor_Set+0x1c>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	080006a1 	.word	0x080006a1
 8000690:	080006a9 	.word	0x080006a9
 8000694:	080006b1 	.word	0x080006b1
	{
		case 0: addr = 0x80 + column; break;
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	3b80      	subs	r3, #128	@ 0x80
 800069c:	73fb      	strb	r3, [r7, #15]
 800069e:	e00e      	b.n	80006be <LCD_Cursor_Set+0x52>
		case 1: addr = 0xC0 + column; break;
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	3b40      	subs	r3, #64	@ 0x40
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	e00a      	b.n	80006be <LCD_Cursor_Set+0x52>
		case 2: addr = 0x94 + column; break;
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	3b6c      	subs	r3, #108	@ 0x6c
 80006ac:	73fb      	strb	r3, [r7, #15]
 80006ae:	e006      	b.n	80006be <LCD_Cursor_Set+0x52>
		case 3: addr = 0xD4 + column; break;
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	3b2c      	subs	r3, #44	@ 0x2c
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	e002      	b.n	80006be <LCD_Cursor_Set+0x52>
		default: addr = 0x80 + column;
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	3b80      	subs	r3, #128	@ 0x80
 80006bc:	73fb      	strb	r3, [r7, #15]
	}
	LCD_Command_Send(addr);
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff1d 	bl	8000500 <LCD_Command_Send>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fb81 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f829 	bl	8000730 <SystemClock_Config>
  DWT_Init();
 80006de:	f000 f995 	bl	8000a0c <DWT_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f8eb 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 f8bf 	bl	8000868 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006ea:	f000 f88f 	bl	800080c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  scannerI2C();
 80006ee:	f000 f969 	bl	80009c4 <scannerI2C>
  dataQueue = xQueueCreate(5,sizeof(DHT11_Data));
 80006f2:	2200      	movs	r2, #0
 80006f4:	2102      	movs	r1, #2
 80006f6:	2005      	movs	r0, #5
 80006f8:	f003 f991 	bl	8003a1e <xQueueGenericCreate>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a08      	ldr	r2, [pc, #32]	@ (8000720 <main+0x50>)
 8000700:	6013      	str	r3, [r2, #0]
  assert_param(dataQueue != NULL);

 // xTaskCreate(DHT11_Task,"DHT11_Task",STACK_SIZE,NULL,1,&DHT11TaskHandler);
 // xTaskCreate(DataProcess_Task,"DataProcess_Task",STACK_SIZE,NULL,1,&DataProcessTaskHandler);
  xTaskCreate(Display_Task,"Display_Task",STACK_SIZE,NULL,1,&DisplayTaskHandler);
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <main+0x54>)
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	2301      	movs	r3, #1
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2300      	movs	r3, #0
 800070c:	2280      	movs	r2, #128	@ 0x80
 800070e:	4906      	ldr	r1, [pc, #24]	@ (8000728 <main+0x58>)
 8000710:	4806      	ldr	r0, [pc, #24]	@ (800072c <main+0x5c>)
 8000712:	f003 fe33 	bl	800437c <xTaskCreate>

  vTaskStartScheduler();
 8000716:	f003 ffc5 	bl	80046a4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071a:	bf00      	nop
 800071c:	e7fd      	b.n	800071a <main+0x4a>
 800071e:	bf00      	nop
 8000720:	2000011c 	.word	0x2000011c
 8000724:	20000118 	.word	0x20000118
 8000728:	08006250 	.word	0x08006250
 800072c:	08000a4d 	.word	0x08000a4d

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	@ 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2234      	movs	r2, #52	@ 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f005 fc92 	bl	8006068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <SystemClock_Config+0xd4>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a29      	ldr	r2, [pc, #164]	@ (8000804 <SystemClock_Config+0xd4>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <SystemClock_Config+0xd4>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <SystemClock_Config+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800077c:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <SystemClock_Config+0xd8>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a4:	2310      	movs	r3, #16
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 ff4a 	bl	8002658 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ca:	f000 f967 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fbb8 	bl	8001f60 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007f6:	f000 f951 	bl	8000a9c <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_I2C1_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_I2C1_Init+0x50>)
 8000818:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <MX_I2C1_Init+0x58>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_I2C1_Init+0x50>)
 800082a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_I2C1_Init+0x50>)
 800084a:	f000 fdbd 	bl	80013c8 <HAL_I2C_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 f922 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000007c 	.word	0x2000007c
 8000860:	40005400 	.word	0x40005400
 8000864:	000186a0 	.word	0x000186a0

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f002 fc1a 	bl	80030d8 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f8f7 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000d0 	.word	0x200000d0
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b37      	ldr	r3, [pc, #220]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a36      	ldr	r2, [pc, #216]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b34      	ldr	r3, [pc, #208]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b30      	ldr	r3, [pc, #192]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a2f      	ldr	r2, [pc, #188]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b2d      	ldr	r3, [pc, #180]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a28      	ldr	r2, [pc, #160]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a21      	ldr	r2, [pc, #132]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_GPIO_Init+0xf8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD0_Pin|LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2132      	movs	r1, #50	@ 0x32
 8000946:	481c      	ldr	r0, [pc, #112]	@ (80009b8 <MX_GPIO_Init+0xfc>)
 8000948:	f000 fd24 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Data_GPIO_Port, Data_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2101      	movs	r1, #1
 8000950:	481a      	ldr	r0, [pc, #104]	@ (80009bc <MX_GPIO_Init+0x100>)
 8000952:	f000 fd1f 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4814      	ldr	r0, [pc, #80]	@ (80009c0 <MX_GPIO_Init+0x104>)
 800096e:	f000 fb7d 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD0_Pin LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD0_Pin|LD1_Pin|LD2_Pin;
 8000972:	2332      	movs	r3, #50	@ 0x32
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <MX_GPIO_Init+0xfc>)
 800098a:	f000 fb6f 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : Data_Pin */
  GPIO_InitStruct.Pin = Data_Pin;
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Data_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_GPIO_Init+0x100>)
 80009a6:	f000 fb61 	bl	800106c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	@ 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400
 80009c0:	40020800 	.word	0x40020800

080009c4 <scannerI2C>:

/* USER CODE BEGIN 4 */

void scannerI2C(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t i;
	int tmp;
	for(i = 1; i < 127; i++)
 80009ca:	2301      	movs	r3, #1
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	e013      	b.n	80009f8 <scannerI2C+0x34>
	{
		status = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	b299      	uxth	r1, r3
 80009d8:	230a      	movs	r3, #10
 80009da:	2201      	movs	r2, #1
 80009dc:	480a      	ldr	r0, [pc, #40]	@ (8000a08 <scannerI2C+0x44>)
 80009de:	f000 ff35 	bl	800184c <HAL_I2C_IsDeviceReady>
 80009e2:	4603      	mov	r3, r0
 80009e4:	71bb      	strb	r3, [r7, #6]
		if(status == HAL_OK)
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <scannerI2C+0x2e>
		{
			tmp = i << 1;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
	for(i = 1; i < 127; i++)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	3301      	adds	r3, #1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b7e      	cmp	r3, #126	@ 0x7e
 80009fc:	d9e8      	bls.n	80009d0 <scannerI2C+0xc>
		}
	}
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000007c 	.word	0x2000007c

08000a0c <DWT_Init>:

void DWT_Init(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	if(!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <DWT_Init+0x38>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d105      	bne.n	8000a28 <DWT_Init+0x1c>
	{
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <DWT_Init+0x38>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <DWT_Init+0x38>)
 8000a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a26:	60d3      	str	r3, [r2, #12]
	}

	DWT->CYCCNT = 0;
 8000a28:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <DWT_Init+0x3c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]

	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <DWT_Init+0x3c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <DWT_Init+0x3c>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6013      	str	r3, [r2, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000edf0 	.word	0xe000edf0
 8000a48:	e0001000 	.word	0xe0001000

08000a4c <Display_Task>:
		}
	}
}

void Display_Task(void* arguments)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	LCD_Initialize();
 8000a54:	f7ff fd88 	bl	8000568 <LCD_Initialize>
			snprintf(buffer, sizeof(buffer), "Humidity: %d%%", receivedData.humidity);
			LCD_String_Send(buffer);

			vTaskDelay(2000 / portTICK_PERIOD_MS);
		}*/
		LCD_Cursor_Set(0,0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff fe06 	bl	800066c <LCD_Cursor_Set>
		LCD_String_Send("Test");
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <Display_Task+0x28>)
 8000a62:	f7ff fded 	bl	8000640 <LCD_String_Send>
		vTaskDelay(2000 / portTICK_PERIOD_MS);
 8000a66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a6a:	f003 fde5 	bl	8004638 <vTaskDelay>
		LCD_Cursor_Set(0,0);
 8000a6e:	bf00      	nop
 8000a70:	e7f2      	b.n	8000a58 <Display_Task+0xc>
 8000a72:	bf00      	nop
 8000a74:	08006260 	.word	0x08006260

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8a:	f000 f9c9 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40001000 	.word	0x40001000

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <HAL_MspInit+0x54>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_MspInit+0x54>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <HAL_MspInit+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fa93 	bl	8001018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	@ (8000b84 <HAL_I2C_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12b      	bne.n	8000b7a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a17      	ldr	r2, [pc, #92]	@ (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b3e:	23c0      	movs	r3, #192	@ 0xc0
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b42:	2312      	movs	r3, #18
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <HAL_I2C_MspInit+0x8c>)
 8000b5a:	f000 fa87 	bl	800106c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	@ 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	@ (8000c14 <HAL_UART_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_UART_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <HAL_UART_MspInit+0x8c>)
 8000c06:	f000 fa31 	bl	800106c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	@ 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <HAL_InitTick+0xe4>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a32      	ldr	r2, [pc, #200]	@ (8000d04 <HAL_InitTick+0xe4>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <HAL_InitTick+0xe4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c4c:	f107 0210 	add.w	r2, r7, #16
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fa9c 	bl	8002194 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c66:	f001 fa6d 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8000c6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c6e:	f001 fa69 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8000c72:	4603      	mov	r3, r0
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c7a:	4a23      	ldr	r2, [pc, #140]	@ (8000d08 <HAL_InitTick+0xe8>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	0c9b      	lsrs	r3, r3, #18
 8000c82:	3b01      	subs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <HAL_InitTick+0xec>)
 8000c88:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <HAL_InitTick+0xf0>)
 8000c8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <HAL_InitTick+0xec>)
 8000c8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c94:	4a1d      	ldr	r2, [pc, #116]	@ (8000d0c <HAL_InitTick+0xec>)
 8000c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <HAL_InitTick+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_InitTick+0xec>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_InitTick+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cac:	4817      	ldr	r0, [pc, #92]	@ (8000d0c <HAL_InitTick+0xec>)
 8000cae:	f001 ff71 	bl	8002b94 <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d11b      	bne.n	8000cf8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cc0:	4812      	ldr	r0, [pc, #72]	@ (8000d0c <HAL_InitTick+0xec>)
 8000cc2:	f001 ffc1 	bl	8002c48 <HAL_TIM_Base_Start_IT>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d111      	bne.n	8000cf8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd4:	2036      	movs	r0, #54	@ 0x36
 8000cd6:	f000 f9bb 	bl	8001050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d808      	bhi.n	8000cf2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	2036      	movs	r0, #54	@ 0x36
 8000ce6:	f000 f997 	bl	8001018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_InitTick+0xf4>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e002      	b.n	8000cf8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3738      	adds	r7, #56	@ 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	20000120 	.word	0x20000120
 8000d10:	40001000 	.word	0x40001000
 8000d14:	20000004 	.word	0x20000004

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <TIM6_DAC_IRQHandler+0x10>)
 8000d56:	f001 ffe7 	bl	8002d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000120 	.word	0x20000120

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f005 f9b5 	bl	8006124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc89 	bl	80006d0 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dcc:	080062a8 	.word	0x080062a8
  ldr r2, =_sbss
 8000dd0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dd4:	20004c90 	.word	0x20004c90

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8fc 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff ff08 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe4a 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000168 	.word	0x20000168

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000168 	.word	0x20000168

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	@ (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	@ (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	@ 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff61 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ffb1 	bl	8000f9c <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff80 	bl	8000f48 <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff54 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e165      	b.n	8001354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8154 	bne.w	800134e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80ae 	beq.w	800134e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b5d      	ldr	r3, [pc, #372]	@ (800136c <HAL_GPIO_Init+0x300>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a5c      	ldr	r2, [pc, #368]	@ (800136c <HAL_GPIO_Init+0x300>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b5a      	ldr	r3, [pc, #360]	@ (800136c <HAL_GPIO_Init+0x300>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a58      	ldr	r2, [pc, #352]	@ (8001370 <HAL_GPIO_Init+0x304>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4f      	ldr	r2, [pc, #316]	@ (8001374 <HAL_GPIO_Init+0x308>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x21a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4e      	ldr	r2, [pc, #312]	@ (8001378 <HAL_GPIO_Init+0x30c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x216>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4d      	ldr	r2, [pc, #308]	@ (800137c <HAL_GPIO_Init+0x310>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x212>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4c      	ldr	r2, [pc, #304]	@ (8001380 <HAL_GPIO_Init+0x314>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x20e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4b      	ldr	r2, [pc, #300]	@ (8001384 <HAL_GPIO_Init+0x318>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x20a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4a      	ldr	r2, [pc, #296]	@ (8001388 <HAL_GPIO_Init+0x31c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x206>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a49      	ldr	r2, [pc, #292]	@ (800138c <HAL_GPIO_Init+0x320>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x202>
 800126a:	2306      	movs	r3, #6
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 800126e:	2307      	movs	r3, #7
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x21c>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	@ (8001370 <HAL_GPIO_Init+0x304>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <HAL_GPIO_Init+0x324>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ca:	4a31      	ldr	r2, [pc, #196]	@ (8001390 <HAL_GPIO_Init+0x324>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <HAL_GPIO_Init+0x324>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f4:	4a26      	ldr	r2, [pc, #152]	@ (8001390 <HAL_GPIO_Init+0x324>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <HAL_GPIO_Init+0x324>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <HAL_GPIO_Init+0x324>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_GPIO_Init+0x324>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001348:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <HAL_GPIO_Init+0x324>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f ae96 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	@ 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e12b      	b.n	8001632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fb86 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2224      	movs	r2, #36	@ 0x24
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800141a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800142a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800142c:	f000 fe8a 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a81      	ldr	r2, [pc, #516]	@ (800163c <HAL_I2C_Init+0x274>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d807      	bhi.n	800144c <HAL_I2C_Init+0x84>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a80      	ldr	r2, [pc, #512]	@ (8001640 <HAL_I2C_Init+0x278>)
 8001440:	4293      	cmp	r3, r2
 8001442:	bf94      	ite	ls
 8001444:	2301      	movls	r3, #1
 8001446:	2300      	movhi	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e006      	b.n	800145a <HAL_I2C_Init+0x92>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a7d      	ldr	r2, [pc, #500]	@ (8001644 <HAL_I2C_Init+0x27c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0e7      	b.n	8001632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a78      	ldr	r2, [pc, #480]	@ (8001648 <HAL_I2C_Init+0x280>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	430a      	orrs	r2, r1
 8001480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a6a      	ldr	r2, [pc, #424]	@ (800163c <HAL_I2C_Init+0x274>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d802      	bhi.n	800149c <HAL_I2C_Init+0xd4>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3301      	adds	r3, #1
 800149a:	e009      	b.n	80014b0 <HAL_I2C_Init+0xe8>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	4a69      	ldr	r2, [pc, #420]	@ (800164c <HAL_I2C_Init+0x284>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	3301      	adds	r3, #1
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	495c      	ldr	r1, [pc, #368]	@ (800163c <HAL_I2C_Init+0x274>)
 80014cc:	428b      	cmp	r3, r1
 80014ce:	d819      	bhi.n	8001504 <HAL_I2C_Init+0x13c>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e59      	subs	r1, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fbb1 f3f3 	udiv	r3, r1, r3
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00a      	beq.n	8001500 <HAL_I2C_Init+0x138>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1e59      	subs	r1, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fe:	e051      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001500:	2304      	movs	r3, #4
 8001502:	e04f      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <HAL_I2C_Init+0x168>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e58      	subs	r0, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	fbb0 f3f3 	udiv	r3, r0, r3
 800151e:	3301      	adds	r3, #1
 8001520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	e012      	b.n	8001556 <HAL_I2C_Init+0x18e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	0099      	lsls	r1, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	fbb0 f3f3 	udiv	r3, r0, r3
 8001546:	3301      	adds	r3, #1
 8001548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_Init+0x196>
 800155a:	2301      	movs	r3, #1
 800155c:	e022      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10e      	bne.n	8001584 <HAL_I2C_Init+0x1bc>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1e58      	subs	r0, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6859      	ldr	r1, [r3, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	440b      	add	r3, r1
 8001574:	fbb0 f3f3 	udiv	r3, r0, r3
 8001578:	3301      	adds	r3, #1
 800157a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001582:	e00f      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1e58      	subs	r0, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	0099      	lsls	r1, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	fbb0 f3f3 	udiv	r3, r0, r3
 800159a:	3301      	adds	r3, #1
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6809      	ldr	r1, [r1, #0]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6911      	ldr	r1, [r2, #16]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68d2      	ldr	r2, [r2, #12]
 80015de:	4311      	orrs	r1, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2220      	movs	r2, #32
 800161e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	000186a0 	.word	0x000186a0
 8001640:	001e847f 	.word	0x001e847f
 8001644:	003d08ff 	.word	0x003d08ff
 8001648:	431bde83 	.word	0x431bde83
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	817b      	strh	r3, [r7, #10]
 8001660:	4613      	mov	r3, r2
 8001662:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff fbf0 	bl	8000e48 <HAL_GetTick>
 8001668:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b20      	cmp	r3, #32
 8001674:	f040 80e0 	bne.w	8001838 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2319      	movs	r3, #25
 800167e:	2201      	movs	r2, #1
 8001680:	4970      	ldr	r1, [pc, #448]	@ (8001844 <HAL_I2C_Master_Transmit+0x1f4>)
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fa92 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800168e:	2302      	movs	r3, #2
 8001690:	e0d3      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_I2C_Master_Transmit+0x50>
 800169c:	2302      	movs	r3, #2
 800169e:	e0cc      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d007      	beq.n	80016c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0201 	orr.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2221      	movs	r2, #33	@ 0x21
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2210      	movs	r2, #16
 80016e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	893a      	ldrh	r2, [r7, #8]
 80016f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a50      	ldr	r2, [pc, #320]	@ (8001848 <HAL_I2C_Master_Transmit+0x1f8>)
 8001706:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001708:	8979      	ldrh	r1, [r7, #10]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	6a3a      	ldr	r2, [r7, #32]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f9ca 	bl	8001aa8 <I2C_MasterRequestWrite>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e08d      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001734:	e066      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fb50 	bl	8001de0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00d      	beq.n	8001762 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	2b04      	cmp	r3, #4
 800174c:	d107      	bne.n	800175e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800175c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e06b      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	3b01      	subs	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b04      	cmp	r3, #4
 800179e:	d11b      	bne.n	80017d8 <HAL_I2C_Master_Transmit+0x188>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d017      	beq.n	80017d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	6a39      	ldr	r1, [r7, #32]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fb47 	bl	8001e70 <I2C_WaitOnBTFFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00d      	beq.n	8001804 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d107      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e01a      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001808:	2b00      	cmp	r3, #0
 800180a:	d194      	bne.n	8001736 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800181a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	00100002 	.word	0x00100002
 8001848:	ffff0000 	.word	0xffff0000

0800184c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	460b      	mov	r3, r1
 800185a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff faf4 	bl	8000e48 <HAL_GetTick>
 8001860:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b20      	cmp	r3, #32
 8001870:	f040 8111 	bne.w	8001a96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2319      	movs	r3, #25
 800187a:	2201      	movs	r2, #1
 800187c:	4988      	ldr	r1, [pc, #544]	@ (8001aa0 <HAL_I2C_IsDeviceReady+0x254>)
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 f994 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800188a:	2302      	movs	r3, #2
 800188c:	e104      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_I2C_IsDeviceReady+0x50>
 8001898:	2302      	movs	r3, #2
 800189a:	e0fd      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x24c>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d007      	beq.n	80018c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2224      	movs	r2, #36	@ 0x24
 80018d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4a70      	ldr	r2, [pc, #448]	@ (8001aa4 <HAL_I2C_IsDeviceReady+0x258>)
 80018e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f952 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00d      	beq.n	800192a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800191c:	d103      	bne.n	8001926 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001924:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0b6      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800192a:	897b      	ldrh	r3, [r7, #10]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001938:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff fa85 	bl	8000e48 <HAL_GetTick>
 800193e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b02      	cmp	r3, #2
 800194c:	bf0c      	ite	eq
 800194e:	2301      	moveq	r3, #1
 8001950:	2300      	movne	r3, #0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800196e:	e025      	b.n	80019bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001970:	f7ff fa6a 	bl	8000e48 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d302      	bcc.n	8001986 <HAL_I2C_IsDeviceReady+0x13a>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	22a0      	movs	r2, #160	@ 0xa0
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b02      	cmp	r3, #2
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2ba0      	cmp	r3, #160	@ 0xa0
 80019c6:	d005      	beq.n	80019d4 <HAL_I2C_IsDeviceReady+0x188>
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_I2C_IsDeviceReady+0x188>
 80019ce:	7dbb      	ldrb	r3, [r7, #22]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0cd      	beq.n	8001970 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d129      	bne.n	8001a3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2319      	movs	r3, #25
 8001a16:	2201      	movs	r2, #1
 8001a18:	4921      	ldr	r1, [pc, #132]	@ (8001aa0 <HAL_I2C_IsDeviceReady+0x254>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f8c6 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e036      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e02c      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2319      	movs	r3, #25
 8001a5e:	2201      	movs	r2, #1
 8001a60:	490f      	ldr	r1, [pc, #60]	@ (8001aa0 <HAL_I2C_IsDeviceReady+0x254>)
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f8a2 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e012      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f4ff af32 	bcc.w	80018e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2220      	movs	r2, #32
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001a96:	2302      	movs	r3, #2
  }
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	00100002 	.word	0x00100002
 8001aa4:	ffff0000 	.word	0xffff0000

08001aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d006      	beq.n	8001ad2 <I2C_MasterRequestWrite+0x2a>
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d003      	beq.n	8001ad2 <I2C_MasterRequestWrite+0x2a>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ad0:	d108      	bne.n	8001ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e00b      	b.n	8001afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d107      	bne.n	8001afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f84f 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00d      	beq.n	8001b30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b22:	d103      	bne.n	8001b2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e035      	b.n	8001b9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b38:	d108      	bne.n	8001b4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	e01b      	b.n	8001b84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b4c:	897b      	ldrh	r3, [r7, #10]
 8001b4e:	11db      	asrs	r3, r3, #7
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f003 0306 	and.w	r3, r3, #6
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f063 030f 	orn	r3, r3, #15
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	490e      	ldr	r1, [pc, #56]	@ (8001ba4 <I2C_MasterRequestWrite+0xfc>)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f898 	bl	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e010      	b.n	8001b9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b7a:	897b      	ldrh	r3, [r7, #10]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4907      	ldr	r1, [pc, #28]	@ (8001ba8 <I2C_MasterRequestWrite+0x100>)
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f888 	bl	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	00010008 	.word	0x00010008
 8001ba8:	00010002 	.word	0x00010002

08001bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bbc:	e048      	b.n	8001c50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d044      	beq.n	8001c50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7ff f93f 	bl	8000e48 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d139      	bne.n	8001c50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10d      	bne.n	8001c02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	43da      	mvns	r2, r3
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	e00c      	b.n	8001c1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d116      	bne.n	8001c50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e023      	b.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0c1b      	lsrs	r3, r3, #16
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d10d      	bne.n	8001c76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	43da      	mvns	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	4013      	ands	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	e00c      	b.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	4013      	ands	r3, r2
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d093      	beq.n	8001bbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cae:	e071      	b.n	8001d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cbe:	d123      	bne.n	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001cd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f043 0204 	orr.w	r2, r3, #4
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e067      	b.n	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0e:	d041      	beq.n	8001d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d10:	f7ff f89a 	bl	8000e48 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d302      	bcc.n	8001d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d136      	bne.n	8001d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10c      	bne.n	8001d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	e00b      	b.n	8001d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	43da      	mvns	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	4013      	ands	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf14      	ite	ne
 8001d5c:	2301      	movne	r3, #1
 8001d5e:	2300      	moveq	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d016      	beq.n	8001d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e021      	b.n	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10c      	bne.n	8001db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	43da      	mvns	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	4013      	ands	r3, r2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf14      	ite	ne
 8001db0:	2301      	movne	r3, #1
 8001db2:	2300      	moveq	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e00b      	b.n	8001dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf14      	ite	ne
 8001dca:	2301      	movne	r3, #1
 8001dcc:	2300      	moveq	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f47f af6d 	bne.w	8001cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dec:	e034      	b.n	8001e58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f886 	bl	8001f00 <I2C_IsAcknowledgeFailed>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e034      	b.n	8001e68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d028      	beq.n	8001e58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f81f 	bl	8000e48 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d11d      	bne.n	8001e58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e26:	2b80      	cmp	r3, #128	@ 0x80
 8001e28:	d016      	beq.n	8001e58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f043 0220 	orr.w	r2, r3, #32
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e007      	b.n	8001e68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e62:	2b80      	cmp	r3, #128	@ 0x80
 8001e64:	d1c3      	bne.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e7c:	e034      	b.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f83e 	bl	8001f00 <I2C_IsAcknowledgeFailed>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e034      	b.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d028      	beq.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7fe ffd7 	bl	8000e48 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d11d      	bne.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d016      	beq.n	8001ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d1c3      	bne.n	8001e7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f16:	d11b      	bne.n	8001f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f043 0204 	orr.w	r2, r3, #4
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0cc      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b68      	ldr	r3, [pc, #416]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d90c      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b65      	ldr	r3, [pc, #404]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b63      	ldr	r3, [pc, #396]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0b8      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb4:	4b59      	ldr	r3, [pc, #356]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a58      	ldr	r2, [pc, #352]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fcc:	4b53      	ldr	r3, [pc, #332]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b50      	ldr	r3, [pc, #320]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	494d      	ldr	r1, [pc, #308]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d044      	beq.n	8002080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d119      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e07f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d003      	beq.n	800201e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201a:	2b03      	cmp	r3, #3
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	4b3f      	ldr	r3, [pc, #252]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e067      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203e:	4b37      	ldr	r3, [pc, #220]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 0203 	bic.w	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4934      	ldr	r1, [pc, #208]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7fe fefa 	bl	8000e48 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	e00a      	b.n	800206e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7fe fef6 	bl	8000e48 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e04f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b2b      	ldr	r3, [pc, #172]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 020c 	and.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1eb      	bne.n	8002058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002080:	4b25      	ldr	r3, [pc, #148]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d20c      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e032      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4916      	ldr	r1, [pc, #88]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	490e      	ldr	r1, [pc, #56]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020e6:	f000 f887 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	490a      	ldr	r1, [pc, #40]	@ (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fd8a 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023c00 	.word	0x40023c00
 800211c:	40023800 	.word	0x40023800
 8002120:	08006280 	.word	0x08006280
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002148:	f7ff fff0 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0a9b      	lsrs	r3, r3, #10
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4903      	ldr	r1, [pc, #12]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	08006290 	.word	0x08006290

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002170:	f7ff ffdc 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	@ (800218c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0b5b      	lsrs	r3, r3, #13
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4903      	ldr	r1, [pc, #12]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	08006290 	.word	0x08006290

08002194 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	220f      	movs	r2, #15
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0203 	and.w	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021b0:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_RCC_GetClockConfig+0x5c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <HAL_RCC_GetClockConfig+0x60>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 020f 	and.w	r2, r3, #15
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	601a      	str	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40023c00 	.word	0x40023c00

080021f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021fc:	b0ae      	sub	sp, #184	@ 0xb8
 80021fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800221e:	4bcb      	ldr	r3, [pc, #812]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	f200 8206 	bhi.w	8002638 <HAL_RCC_GetSysClockFreq+0x440>
 800222c:	a201      	add	r2, pc, #4	@ (adr r2, 8002234 <HAL_RCC_GetSysClockFreq+0x3c>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002269 	.word	0x08002269
 8002238:	08002639 	.word	0x08002639
 800223c:	08002639 	.word	0x08002639
 8002240:	08002639 	.word	0x08002639
 8002244:	08002271 	.word	0x08002271
 8002248:	08002639 	.word	0x08002639
 800224c:	08002639 	.word	0x08002639
 8002250:	08002639 	.word	0x08002639
 8002254:	08002279 	.word	0x08002279
 8002258:	08002639 	.word	0x08002639
 800225c:	08002639 	.word	0x08002639
 8002260:	08002639 	.word	0x08002639
 8002264:	08002469 	.word	0x08002469
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4bb9      	ldr	r3, [pc, #740]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x358>)
 800226a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800226e:	e1e7      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002270:	4bb8      	ldr	r3, [pc, #736]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002276:	e1e3      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002278:	4bb4      	ldr	r3, [pc, #720]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002284:	4bb1      	ldr	r3, [pc, #708]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d071      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002290:	4bae      	ldr	r3, [pc, #696]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	2200      	movs	r2, #0
 8002298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800229c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022b6:	4622      	mov	r2, r4
 80022b8:	462b      	mov	r3, r5
 80022ba:	f04f 0000 	mov.w	r0, #0
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	0159      	lsls	r1, r3, #5
 80022c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c8:	0150      	lsls	r0, r2, #5
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4621      	mov	r1, r4
 80022d0:	1a51      	subs	r1, r2, r1
 80022d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80022d4:	4629      	mov	r1, r5
 80022d6:	eb63 0301 	sbc.w	r3, r3, r1
 80022da:	647b      	str	r3, [r7, #68]	@ 0x44
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80022e8:	4649      	mov	r1, r9
 80022ea:	018b      	lsls	r3, r1, #6
 80022ec:	4641      	mov	r1, r8
 80022ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022f2:	4641      	mov	r1, r8
 80022f4:	018a      	lsls	r2, r1, #6
 80022f6:	4641      	mov	r1, r8
 80022f8:	1a51      	subs	r1, r2, r1
 80022fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022fc:	4649      	mov	r1, r9
 80022fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002310:	4649      	mov	r1, r9
 8002312:	00cb      	lsls	r3, r1, #3
 8002314:	4641      	mov	r1, r8
 8002316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800231a:	4641      	mov	r1, r8
 800231c:	00ca      	lsls	r2, r1, #3
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	4603      	mov	r3, r0
 8002324:	4622      	mov	r2, r4
 8002326:	189b      	adds	r3, r3, r2
 8002328:	633b      	str	r3, [r7, #48]	@ 0x30
 800232a:	462b      	mov	r3, r5
 800232c:	460a      	mov	r2, r1
 800232e:	eb42 0303 	adc.w	r3, r2, r3
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002340:	4629      	mov	r1, r5
 8002342:	024b      	lsls	r3, r1, #9
 8002344:	4621      	mov	r1, r4
 8002346:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800234a:	4621      	mov	r1, r4
 800234c:	024a      	lsls	r2, r1, #9
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800235c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002360:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002364:	f7fd ff54 	bl	8000210 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002372:	e067      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002374:	4b75      	ldr	r3, [pc, #468]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	2200      	movs	r2, #0
 800237c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002380:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002384:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800238e:	2300      	movs	r3, #0
 8002390:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002392:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a8:	0150      	lsls	r0, r2, #5
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4621      	mov	r1, r4
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023b4:	4629      	mov	r1, r5
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80023c8:	4649      	mov	r1, r9
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	4641      	mov	r1, r8
 80023ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d2:	4641      	mov	r1, r8
 80023d4:	018a      	lsls	r2, r1, #6
 80023d6:	4641      	mov	r1, r8
 80023d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80023dc:	4649      	mov	r1, r9
 80023de:	eb63 0b01 	sbc.w	fp, r3, r1
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023f6:	4692      	mov	sl, r2
 80023f8:	469b      	mov	fp, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	eb1a 0303 	adds.w	r3, sl, r3
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	462b      	mov	r3, r5
 8002404:	eb4b 0303 	adc.w	r3, fp, r3
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002416:	4629      	mov	r1, r5
 8002418:	028b      	lsls	r3, r1, #10
 800241a:	4621      	mov	r1, r4
 800241c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002420:	4621      	mov	r1, r4
 8002422:	028a      	lsls	r2, r1, #10
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800242c:	2200      	movs	r2, #0
 800242e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002430:	677a      	str	r2, [r7, #116]	@ 0x74
 8002432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002436:	f7fd feeb 	bl	8000210 <__aeabi_uldivmod>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4613      	mov	r3, r2
 8002440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002444:	4b41      	ldr	r3, [pc, #260]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800245a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002466:	e0eb      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002468:	4b38      	ldr	r3, [pc, #224]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002474:	4b35      	ldr	r3, [pc, #212]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d06b      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002480:	4b32      	ldr	r3, [pc, #200]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	2200      	movs	r2, #0
 8002488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800248a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800248c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800248e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002492:	663b      	str	r3, [r7, #96]	@ 0x60
 8002494:	2300      	movs	r3, #0
 8002496:	667b      	str	r3, [r7, #100]	@ 0x64
 8002498:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800249c:	4622      	mov	r2, r4
 800249e:	462b      	mov	r3, r5
 80024a0:	f04f 0000 	mov.w	r0, #0
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	0159      	lsls	r1, r3, #5
 80024aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ae:	0150      	lsls	r0, r2, #5
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4621      	mov	r1, r4
 80024b6:	1a51      	subs	r1, r2, r1
 80024b8:	61b9      	str	r1, [r7, #24]
 80024ba:	4629      	mov	r1, r5
 80024bc:	eb63 0301 	sbc.w	r3, r3, r1
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024ce:	4659      	mov	r1, fp
 80024d0:	018b      	lsls	r3, r1, #6
 80024d2:	4651      	mov	r1, sl
 80024d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024d8:	4651      	mov	r1, sl
 80024da:	018a      	lsls	r2, r1, #6
 80024dc:	4651      	mov	r1, sl
 80024de:	ebb2 0801 	subs.w	r8, r2, r1
 80024e2:	4659      	mov	r1, fp
 80024e4:	eb63 0901 	sbc.w	r9, r3, r1
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024fc:	4690      	mov	r8, r2
 80024fe:	4699      	mov	r9, r3
 8002500:	4623      	mov	r3, r4
 8002502:	eb18 0303 	adds.w	r3, r8, r3
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	462b      	mov	r3, r5
 800250a:	eb49 0303 	adc.w	r3, r9, r3
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800251c:	4629      	mov	r1, r5
 800251e:	024b      	lsls	r3, r1, #9
 8002520:	4621      	mov	r1, r4
 8002522:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002526:	4621      	mov	r1, r4
 8002528:	024a      	lsls	r2, r1, #9
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002532:	2200      	movs	r2, #0
 8002534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002536:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002538:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800253c:	f7fd fe68 	bl	8000210 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4613      	mov	r3, r2
 8002546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800254a:	e065      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x420>
 800254c:	40023800 	.word	0x40023800
 8002550:	00f42400 	.word	0x00f42400
 8002554:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002558:	4b3d      	ldr	r3, [pc, #244]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x458>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	2200      	movs	r2, #0
 8002560:	4618      	mov	r0, r3
 8002562:	4611      	mov	r1, r2
 8002564:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002568:	653b      	str	r3, [r7, #80]	@ 0x50
 800256a:	2300      	movs	r3, #0
 800256c:	657b      	str	r3, [r7, #84]	@ 0x54
 800256e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002572:	4642      	mov	r2, r8
 8002574:	464b      	mov	r3, r9
 8002576:	f04f 0000 	mov.w	r0, #0
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	0159      	lsls	r1, r3, #5
 8002580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002584:	0150      	lsls	r0, r2, #5
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4641      	mov	r1, r8
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	4649      	mov	r1, r9
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025a4:	4659      	mov	r1, fp
 80025a6:	018b      	lsls	r3, r1, #6
 80025a8:	4651      	mov	r1, sl
 80025aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ae:	4651      	mov	r1, sl
 80025b0:	018a      	lsls	r2, r1, #6
 80025b2:	4651      	mov	r1, sl
 80025b4:	1a54      	subs	r4, r2, r1
 80025b6:	4659      	mov	r1, fp
 80025b8:	eb63 0501 	sbc.w	r5, r3, r1
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	00eb      	lsls	r3, r5, #3
 80025c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ca:	00e2      	lsls	r2, r4, #3
 80025cc:	4614      	mov	r4, r2
 80025ce:	461d      	mov	r5, r3
 80025d0:	4643      	mov	r3, r8
 80025d2:	18e3      	adds	r3, r4, r3
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	464b      	mov	r3, r9
 80025d8:	eb45 0303 	adc.w	r3, r5, r3
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ea:	4629      	mov	r1, r5
 80025ec:	028b      	lsls	r3, r1, #10
 80025ee:	4621      	mov	r1, r4
 80025f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f4:	4621      	mov	r1, r4
 80025f6:	028a      	lsls	r2, r1, #10
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002600:	2200      	movs	r2, #0
 8002602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002604:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002606:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800260a:	f7fd fe01 	bl	8000210 <__aeabi_uldivmod>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4613      	mov	r3, r2
 8002614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002618:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x458>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0f1b      	lsrs	r3, r3, #28
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800262a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002636:	e003      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x45c>)
 800263a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800263e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002644:	4618      	mov	r0, r3
 8002646:	37b8      	adds	r7, #184	@ 0xb8
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	00f42400 	.word	0x00f42400

08002658 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e28d      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8083 	beq.w	800277e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002678:	4b94      	ldr	r3, [pc, #592]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d019      	beq.n	80026b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002684:	4b91      	ldr	r3, [pc, #580]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
        || \
 800268c:	2b08      	cmp	r3, #8
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002690:	4b8e      	ldr	r3, [pc, #568]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800269c:	d00c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269e:	4b8b      	ldr	r3, [pc, #556]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d112      	bne.n	80026d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	4b84      	ldr	r3, [pc, #528]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05b      	beq.n	800277c <HAL_RCC_OscConfig+0x124>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d157      	bne.n	800277c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e25a      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x90>
 80026da:	4b7c      	ldr	r3, [pc, #496]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7b      	ldr	r2, [pc, #492]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e01d      	b.n	8002724 <HAL_RCC_OscConfig+0xcc>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0xb4>
 80026f2:	4b76      	ldr	r3, [pc, #472]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a75      	ldr	r2, [pc, #468]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b73      	ldr	r3, [pc, #460]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a72      	ldr	r2, [pc, #456]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xcc>
 800270c:	4b6f      	ldr	r3, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a6e      	ldr	r2, [pc, #440]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b6c      	ldr	r3, [pc, #432]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6b      	ldr	r2, [pc, #428]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fb8c 	bl	8000e48 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fb88 	bl	8000e48 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e21f      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b61      	ldr	r3, [pc, #388]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0xdc>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fb78 	bl	8000e48 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe fb74 	bl	8000e48 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	@ 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e20b      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	4b57      	ldr	r3, [pc, #348]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x104>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d06f      	beq.n	800286a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800278a:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b00      	cmp	r3, #0
 8002794:	d017      	beq.n	80027c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002796:	4b4d      	ldr	r3, [pc, #308]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
        || \
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027a2:	4b4a      	ldr	r3, [pc, #296]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ba:	4b44      	ldr	r3, [pc, #272]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x186>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1d3      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4937      	ldr	r1, [pc, #220]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_RCC_OscConfig+0x278>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe fb21 	bl	8000e48 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe fb1d 	bl	8000e48 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1b4      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4925      	ldr	r1, [pc, #148]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_RCC_OscConfig+0x278>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fb00 	bl	8000e48 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe fafc 	bl	8000e48 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e193      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d036      	beq.n	80028e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <HAL_RCC_OscConfig+0x27c>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fae0 	bl	8000e48 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fadc 	bl	8000e48 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e173      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x234>
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe fac9 	bl	8000e48 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	e00e      	b.n	80028d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe fac5 	bl	8000e48 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d907      	bls.n	80028d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e15c      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470000 	.word	0x42470000
 80028d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ea      	bne.n	80028ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8097 	beq.w	8002a20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b83      	ldr	r3, [pc, #524]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b7f      	ldr	r3, [pc, #508]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	@ 0x40
 8002912:	4b7c      	ldr	r3, [pc, #496]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b79      	ldr	r3, [pc, #484]	@ (8002b08 <HAL_RCC_OscConfig+0x4b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b76      	ldr	r3, [pc, #472]	@ (8002b08 <HAL_RCC_OscConfig+0x4b0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a75      	ldr	r2, [pc, #468]	@ (8002b08 <HAL_RCC_OscConfig+0x4b0>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe fa85 	bl	8000e48 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe fa81 	bl	8000e48 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e118      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b6c      	ldr	r3, [pc, #432]	@ (8002b08 <HAL_RCC_OscConfig+0x4b0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x31e>
 8002968:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a65      	ldr	r2, [pc, #404]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0x358>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x340>
 800297e:	4b61      	ldr	r3, [pc, #388]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a60      	ldr	r2, [pc, #384]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
 800298a:	4b5e      	ldr	r3, [pc, #376]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298e:	4a5d      	ldr	r2, [pc, #372]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	@ 0x70
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x358>
 8002998:	4b5a      	ldr	r3, [pc, #360]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a59      	ldr	r2, [pc, #356]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b57      	ldr	r3, [pc, #348]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a56      	ldr	r2, [pc, #344]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fa46 	bl	8000e48 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe fa42 	bl	8000e48 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0d7      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCC_OscConfig+0x368>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fa30 	bl	8000e48 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fa2c 	bl	8000e48 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0c1      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	4b40      	ldr	r3, [pc, #256]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ee      	bne.n	80029ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	4a3a      	ldr	r2, [pc, #232]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80ad 	beq.w	8002b84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a2a:	4b36      	ldr	r3, [pc, #216]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d060      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d145      	bne.n	8002aca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_RCC_OscConfig+0x4b4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fa00 	bl	8000e48 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe f9fc 	bl	8000e48 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e093      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	071b      	lsls	r3, r3, #28
 8002a96:	491b      	ldr	r1, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x4b4>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe f9d1 	bl	8000e48 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7fe f9cd 	bl	8000e48 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e064      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abc:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x452>
 8002ac8:	e05c      	b.n	8002b84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_RCC_OscConfig+0x4b4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe f9ba 	bl	8000e48 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe f9b6 	bl	8000e48 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e04d      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x480>
 8002af6:	e045      	b.n	8002b84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e040      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b10:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <HAL_RCC_OscConfig+0x538>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d030      	beq.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d129      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d122      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d119      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d10f      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800

08002b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e041      	b.n	8002c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f839 	bl	8002c32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f000 f9c0 	bl	8002f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d001      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e04e      	b.n	8002cfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	@ (8002d0c <HAL_TIM_Base_Start_IT+0xc4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d022      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x80>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c8a:	d01d      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x80>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1f      	ldr	r2, [pc, #124]	@ (8002d10 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d018      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x80>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d14 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x80>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x80>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1b      	ldr	r2, [pc, #108]	@ (8002d1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x80>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x80>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a18      	ldr	r2, [pc, #96]	@ (8002d24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d111      	bne.n	8002cec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d010      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	e007      	b.n	8002cfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	40010400 	.word	0x40010400
 8002d20:	40014000 	.word	0x40014000
 8002d24:	40001800 	.word	0x40001800

08002d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d020      	beq.n	8002d8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0202 	mvn.w	r2, #2
 8002d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8d2 	bl	8002f1c <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8c4 	bl	8002f08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f8d5 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d020      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01b      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0204 	mvn.w	r2, #4
 8002da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8ac 	bl	8002f1c <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f89e 	bl	8002f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8af 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d020      	beq.n	8002e24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01b      	beq.n	8002e24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0208 	mvn.w	r2, #8
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f886 	bl	8002f1c <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f878 	bl	8002f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f889 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d020      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0210 	mvn.w	r2, #16
 8002e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2208      	movs	r2, #8
 8002e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f860 	bl	8002f1c <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f852 	bl	8002f08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f863 	bl	8002f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0201 	mvn.w	r2, #1
 8002e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd fdf2 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f906 	bl	80030c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f834 	bl	8002f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0220 	mvn.w	r2, #32
 8002ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8d8 	bl	80030b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a46      	ldr	r2, [pc, #280]	@ (8003084 <TIM_Base_SetConfig+0x12c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f76:	d00f      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a43      	ldr	r2, [pc, #268]	@ (8003088 <TIM_Base_SetConfig+0x130>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a42      	ldr	r2, [pc, #264]	@ (800308c <TIM_Base_SetConfig+0x134>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a41      	ldr	r2, [pc, #260]	@ (8003090 <TIM_Base_SetConfig+0x138>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a40      	ldr	r2, [pc, #256]	@ (8003094 <TIM_Base_SetConfig+0x13c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a35      	ldr	r2, [pc, #212]	@ (8003084 <TIM_Base_SetConfig+0x12c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb8:	d027      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a32      	ldr	r2, [pc, #200]	@ (8003088 <TIM_Base_SetConfig+0x130>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d023      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a31      	ldr	r2, [pc, #196]	@ (800308c <TIM_Base_SetConfig+0x134>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01f      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a30      	ldr	r2, [pc, #192]	@ (8003090 <TIM_Base_SetConfig+0x138>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8003094 <TIM_Base_SetConfig+0x13c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d017      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003098 <TIM_Base_SetConfig+0x140>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800309c <TIM_Base_SetConfig+0x144>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00f      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a2c      	ldr	r2, [pc, #176]	@ (80030a0 <TIM_Base_SetConfig+0x148>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80030a4 <TIM_Base_SetConfig+0x14c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d007      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80030a8 <TIM_Base_SetConfig+0x150>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a29      	ldr	r2, [pc, #164]	@ (80030ac <TIM_Base_SetConfig+0x154>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d108      	bne.n	800301c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a10      	ldr	r2, [pc, #64]	@ (8003084 <TIM_Base_SetConfig+0x12c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0xf8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <TIM_Base_SetConfig+0x13c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f023 0201 	bic.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]
  }
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	40010400 	.word	0x40010400
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800
 80030a4:	40001800 	.word	0x40001800
 80030a8:	40001c00 	.word	0x40001c00
 80030ac:	40002000 	.word	0x40002000

080030b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e042      	b.n	8003170 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fd46 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	@ 0x24
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800311a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f82b 	bl	8003178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b0c0      	sub	sp, #256	@ 0x100
 800317e:	af00      	add	r7, sp, #0
 8003180:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	68d9      	ldr	r1, [r3, #12]
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	ea40 0301 	orr.w	r3, r0, r1
 80031a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031d0:	f021 010c 	bic.w	r1, r1, #12
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031de:	430b      	orrs	r3, r1
 80031e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	6999      	ldr	r1, [r3, #24]
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	ea40 0301 	orr.w	r3, r0, r1
 80031fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b8f      	ldr	r3, [pc, #572]	@ (8003444 <UART_SetConfig+0x2cc>)
 8003208:	429a      	cmp	r2, r3
 800320a:	d005      	beq.n	8003218 <UART_SetConfig+0xa0>
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b8d      	ldr	r3, [pc, #564]	@ (8003448 <UART_SetConfig+0x2d0>)
 8003214:	429a      	cmp	r2, r3
 8003216:	d104      	bne.n	8003222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7fe ffa8 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 800321c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003220:	e003      	b.n	800322a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003222:	f7fe ff8f 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8003226:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003234:	f040 810c 	bne.w	8003450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800323c:	2200      	movs	r2, #0
 800323e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003242:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800324a:	4622      	mov	r2, r4
 800324c:	462b      	mov	r3, r5
 800324e:	1891      	adds	r1, r2, r2
 8003250:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003252:	415b      	adcs	r3, r3
 8003254:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800325a:	4621      	mov	r1, r4
 800325c:	eb12 0801 	adds.w	r8, r2, r1
 8003260:	4629      	mov	r1, r5
 8003262:	eb43 0901 	adc.w	r9, r3, r1
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800327a:	4690      	mov	r8, r2
 800327c:	4699      	mov	r9, r3
 800327e:	4623      	mov	r3, r4
 8003280:	eb18 0303 	adds.w	r3, r8, r3
 8003284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003288:	462b      	mov	r3, r5
 800328a:	eb49 0303 	adc.w	r3, r9, r3
 800328e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800329e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032a6:	460b      	mov	r3, r1
 80032a8:	18db      	adds	r3, r3, r3
 80032aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80032ac:	4613      	mov	r3, r2
 80032ae:	eb42 0303 	adc.w	r3, r2, r3
 80032b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80032b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032bc:	f7fc ffa8 	bl	8000210 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b61      	ldr	r3, [pc, #388]	@ (800344c <UART_SetConfig+0x2d4>)
 80032c6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	011c      	lsls	r4, r3, #4
 80032ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032e8:	415b      	adcs	r3, r3
 80032ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032f0:	4641      	mov	r1, r8
 80032f2:	eb12 0a01 	adds.w	sl, r2, r1
 80032f6:	4649      	mov	r1, r9
 80032f8:	eb43 0b01 	adc.w	fp, r3, r1
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800330c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003310:	4692      	mov	sl, r2
 8003312:	469b      	mov	fp, r3
 8003314:	4643      	mov	r3, r8
 8003316:	eb1a 0303 	adds.w	r3, sl, r3
 800331a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800331e:	464b      	mov	r3, r9
 8003320:	eb4b 0303 	adc.w	r3, fp, r3
 8003324:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003334:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800333c:	460b      	mov	r3, r1
 800333e:	18db      	adds	r3, r3, r3
 8003340:	643b      	str	r3, [r7, #64]	@ 0x40
 8003342:	4613      	mov	r3, r2
 8003344:	eb42 0303 	adc.w	r3, r2, r3
 8003348:	647b      	str	r3, [r7, #68]	@ 0x44
 800334a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800334e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003352:	f7fc ff5d 	bl	8000210 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4611      	mov	r1, r2
 800335c:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <UART_SetConfig+0x2d4>)
 800335e:	fba3 2301 	umull	r2, r3, r3, r1
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2264      	movs	r2, #100	@ 0x64
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	1acb      	subs	r3, r1, r3
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003372:	4b36      	ldr	r3, [pc, #216]	@ (800344c <UART_SetConfig+0x2d4>)
 8003374:	fba3 2302 	umull	r2, r3, r3, r2
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003380:	441c      	add	r4, r3
 8003382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800338c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	1891      	adds	r1, r2, r2
 800339a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800339c:	415b      	adcs	r3, r3
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033a4:	4641      	mov	r1, r8
 80033a6:	1851      	adds	r1, r2, r1
 80033a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80033aa:	4649      	mov	r1, r9
 80033ac:	414b      	adcs	r3, r1
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033bc:	4659      	mov	r1, fp
 80033be:	00cb      	lsls	r3, r1, #3
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c6:	4651      	mov	r1, sl
 80033c8:	00ca      	lsls	r2, r1, #3
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	4642      	mov	r2, r8
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033d8:	464b      	mov	r3, r9
 80033da:	460a      	mov	r2, r1
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033f8:	460b      	mov	r3, r1
 80033fa:	18db      	adds	r3, r3, r3
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033fe:	4613      	mov	r3, r2
 8003400:	eb42 0303 	adc.w	r3, r2, r3
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800340a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800340e:	f7fc feff 	bl	8000210 <__aeabi_uldivmod>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <UART_SetConfig+0x2d4>)
 8003418:	fba3 1302 	umull	r1, r3, r3, r2
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	2164      	movs	r1, #100	@ 0x64
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	3332      	adds	r3, #50	@ 0x32
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <UART_SetConfig+0x2d4>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	f003 0207 	and.w	r2, r3, #7
 8003436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4422      	add	r2, r4
 800343e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003440:	e106      	b.n	8003650 <UART_SetConfig+0x4d8>
 8003442:	bf00      	nop
 8003444:	40011000 	.word	0x40011000
 8003448:	40011400 	.word	0x40011400
 800344c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800345a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800345e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003462:	4642      	mov	r2, r8
 8003464:	464b      	mov	r3, r9
 8003466:	1891      	adds	r1, r2, r2
 8003468:	6239      	str	r1, [r7, #32]
 800346a:	415b      	adcs	r3, r3
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
 800346e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003472:	4641      	mov	r1, r8
 8003474:	1854      	adds	r4, r2, r1
 8003476:	4649      	mov	r1, r9
 8003478:	eb43 0501 	adc.w	r5, r3, r1
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	00eb      	lsls	r3, r5, #3
 8003486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348a:	00e2      	lsls	r2, r4, #3
 800348c:	4614      	mov	r4, r2
 800348e:	461d      	mov	r5, r3
 8003490:	4643      	mov	r3, r8
 8003492:	18e3      	adds	r3, r4, r3
 8003494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003498:	464b      	mov	r3, r9
 800349a:	eb45 0303 	adc.w	r3, r5, r3
 800349e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034be:	4629      	mov	r1, r5
 80034c0:	008b      	lsls	r3, r1, #2
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c8:	4621      	mov	r1, r4
 80034ca:	008a      	lsls	r2, r1, #2
 80034cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034d0:	f7fc fe9e 	bl	8000210 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4b60      	ldr	r3, [pc, #384]	@ (800365c <UART_SetConfig+0x4e4>)
 80034da:	fba3 2302 	umull	r2, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	011c      	lsls	r4, r3, #4
 80034e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034f4:	4642      	mov	r2, r8
 80034f6:	464b      	mov	r3, r9
 80034f8:	1891      	adds	r1, r2, r2
 80034fa:	61b9      	str	r1, [r7, #24]
 80034fc:	415b      	adcs	r3, r3
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003504:	4641      	mov	r1, r8
 8003506:	1851      	adds	r1, r2, r1
 8003508:	6139      	str	r1, [r7, #16]
 800350a:	4649      	mov	r1, r9
 800350c:	414b      	adcs	r3, r1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800351c:	4659      	mov	r1, fp
 800351e:	00cb      	lsls	r3, r1, #3
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003526:	4651      	mov	r1, sl
 8003528:	00ca      	lsls	r2, r1, #3
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	4603      	mov	r3, r0
 8003530:	4642      	mov	r2, r8
 8003532:	189b      	adds	r3, r3, r2
 8003534:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003538:	464b      	mov	r3, r9
 800353a:	460a      	mov	r2, r1
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800354e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800355c:	4649      	mov	r1, r9
 800355e:	008b      	lsls	r3, r1, #2
 8003560:	4641      	mov	r1, r8
 8003562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003566:	4641      	mov	r1, r8
 8003568:	008a      	lsls	r2, r1, #2
 800356a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800356e:	f7fc fe4f 	bl	8000210 <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4611      	mov	r1, r2
 8003578:	4b38      	ldr	r3, [pc, #224]	@ (800365c <UART_SetConfig+0x4e4>)
 800357a:	fba3 2301 	umull	r2, r3, r3, r1
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2264      	movs	r2, #100	@ 0x64
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	1acb      	subs	r3, r1, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	@ 0x32
 800358c:	4a33      	ldr	r2, [pc, #204]	@ (800365c <UART_SetConfig+0x4e4>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003598:	441c      	add	r4, r3
 800359a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800359e:	2200      	movs	r2, #0
 80035a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80035a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80035a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035a8:	4642      	mov	r2, r8
 80035aa:	464b      	mov	r3, r9
 80035ac:	1891      	adds	r1, r2, r2
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	415b      	adcs	r3, r3
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b8:	4641      	mov	r1, r8
 80035ba:	1851      	adds	r1, r2, r1
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	4649      	mov	r1, r9
 80035c0:	414b      	adcs	r3, r1
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035d0:	4659      	mov	r1, fp
 80035d2:	00cb      	lsls	r3, r1, #3
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035da:	4651      	mov	r1, sl
 80035dc:	00ca      	lsls	r2, r1, #3
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	4642      	mov	r2, r8
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ea:	464b      	mov	r3, r9
 80035ec:	460a      	mov	r2, r1
 80035ee:	eb42 0303 	adc.w	r3, r2, r3
 80035f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80035fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800360c:	4649      	mov	r1, r9
 800360e:	008b      	lsls	r3, r1, #2
 8003610:	4641      	mov	r1, r8
 8003612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003616:	4641      	mov	r1, r8
 8003618:	008a      	lsls	r2, r1, #2
 800361a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800361e:	f7fc fdf7 	bl	8000210 <__aeabi_uldivmod>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <UART_SetConfig+0x4e4>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2164      	movs	r1, #100	@ 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	3332      	adds	r3, #50	@ 0x32
 800363a:	4a08      	ldr	r2, [pc, #32]	@ (800365c <UART_SetConfig+0x4e4>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	f003 020f 	and.w	r2, r3, #15
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4422      	add	r2, r4
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003656:	46bd      	mov	sp, r7
 8003658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365c:	51eb851f 	.word	0x51eb851f

08003660 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <SysTick_Handler+0x1c>)
 8003666:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003668:	f001 fc80 	bl	8004f6c <xTaskGetSchedulerState>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003672:	f002 fa79 	bl	8005b68 <xPortSysTickHandler>
  }
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e000e010 	.word	0xe000e010

08003680 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a07      	ldr	r2, [pc, #28]	@ (80036ac <vApplicationGetIdleTaskMemory+0x2c>)
 8003690:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4a06      	ldr	r2, [pc, #24]	@ (80036b0 <vApplicationGetIdleTaskMemory+0x30>)
 8003696:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2280      	movs	r2, #128	@ 0x80
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	2000016c 	.word	0x2000016c
 80036b0:	20000214 	.word	0x20000214

080036b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a07      	ldr	r2, [pc, #28]	@ (80036e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80036c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <vApplicationGetTimerTaskMemory+0x30>)
 80036ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036d2:	601a      	str	r2, [r3, #0]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20000414 	.word	0x20000414
 80036e4:	200004bc 	.word	0x200004bc

080036e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f103 0208 	add.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f103 0208 	add.w	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f103 0208 	add.w	r2, r3, #8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d103      	bne.n	80037aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e00c      	b.n	80037c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3308      	adds	r3, #8
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e002      	b.n	80037b8 <vListInsert+0x2e>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d2f6      	bcs.n	80037b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6852      	ldr	r2, [r2, #4]
 800381c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d103      	bne.n	8003830 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	1e5a      	subs	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800387c:	f002 f8e4 	bl	8005a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	68f9      	ldr	r1, [r7, #12]
 800388a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	441a      	add	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	3b01      	subs	r3, #1
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	441a      	add	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	22ff      	movs	r2, #255	@ 0xff
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	22ff      	movs	r2, #255	@ 0xff
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d114      	bne.n	80038fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01a      	beq.n	8003910 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3310      	adds	r3, #16
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 f97e 	bl	8004be0 <xTaskRemoveFromEventList>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <xQueueGenericReset+0xd0>)
 80038ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	e009      	b.n	8003910 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3310      	adds	r3, #16
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fef1 	bl	80036e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3324      	adds	r3, #36	@ 0x24
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff feec 	bl	80036e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003910:	f002 f8cc 	bl	8005aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003914:	2301      	movs	r3, #1
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08e      	sub	sp, #56	@ 0x38
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	e7fd      	b.n	800396a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <xQueueGenericCreateStatic+0x56>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <xQueueGenericCreateStatic+0x5a>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <xQueueGenericCreateStatic+0x5c>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	623b      	str	r3, [r7, #32]
}
 8003996:	bf00      	nop
 8003998:	bf00      	nop
 800399a:	e7fd      	b.n	8003998 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <xQueueGenericCreateStatic+0x84>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <xQueueGenericCreateStatic+0x88>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <xQueueGenericCreateStatic+0x8a>
 80039ac:	2300      	movs	r3, #0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	61fb      	str	r3, [r7, #28]
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80039ca:	2350      	movs	r3, #80	@ 0x50
 80039cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b50      	cmp	r3, #80	@ 0x50
 80039d2:	d00b      	beq.n	80039ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61bb      	str	r3, [r7, #24]
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f840 	bl	8003a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3730      	adds	r7, #48	@ 0x30
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08a      	sub	sp, #40	@ 0x28
 8003a22:	af02      	add	r7, sp, #8
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10b      	bne.n	8003a4a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	613b      	str	r3, [r7, #16]
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	e7fd      	b.n	8003a46 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	3350      	adds	r3, #80	@ 0x50
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f002 f917 	bl	8005c8c <pvPortMalloc>
 8003a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d011      	beq.n	8003a8a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	3350      	adds	r3, #80	@ 0x50
 8003a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a78:	79fa      	ldrb	r2, [r7, #7]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f805 	bl	8003a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e002      	b.n	8003ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	69b8      	ldr	r0, [r7, #24]
 8003ac6:	f7ff fec3 	bl	8003850 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	@ 0x38
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003aea:	2300      	movs	r3, #0
 8003aec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <xQueueGenericSend+0x34>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <xQueueGenericSend+0x42>
 8003b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <xQueueGenericSend+0x46>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericSend+0x48>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <xQueueGenericSend+0x64>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b3a:	bf00      	nop
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d103      	bne.n	8003b4e <xQueueGenericSend+0x72>
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <xQueueGenericSend+0x76>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <xQueueGenericSend+0x78>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <xQueueGenericSend+0x94>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	623b      	str	r3, [r7, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b70:	f001 f9fc 	bl	8004f6c <xTaskGetSchedulerState>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <xQueueGenericSend+0xa4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <xQueueGenericSend+0xa8>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <xQueueGenericSend+0xaa>
 8003b84:	2300      	movs	r3, #0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	61fb      	str	r3, [r7, #28]
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	e7fd      	b.n	8003b9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ba2:	f001 ff51 	bl	8005a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <xQueueGenericSend+0xdc>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d129      	bne.n	8003c0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bbe:	f000 fa0f 	bl	8003fe0 <prvCopyDataToQueue>
 8003bc2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	3324      	adds	r3, #36	@ 0x24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 f805 	bl	8004be0 <xTaskRemoveFromEventList>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8003cdc <xQueueGenericSend+0x200>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	e00a      	b.n	8003c04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bf4:	4b39      	ldr	r3, [pc, #228]	@ (8003cdc <xQueueGenericSend+0x200>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c04:	f001 ff52 	bl	8005aac <vPortExitCritical>
				return pdPASS;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e063      	b.n	8003cd4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c12:	f001 ff4b 	bl	8005aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e05c      	b.n	8003cd4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 f83f 	bl	8004ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c2e:	f001 ff3d 	bl	8005aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c32:	f000 fda7 	bl	8004784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c36:	f001 ff07 	bl	8005a48 <vPortEnterCritical>
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d103      	bne.n	8003c50 <xQueueGenericSend+0x174>
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d103      	bne.n	8003c66 <xQueueGenericSend+0x18a>
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c66:	f001 ff21 	bl	8005aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c6a:	1d3a      	adds	r2, r7, #4
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 f82e 	bl	8004cd4 <xTaskCheckForTimeOut>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d124      	bne.n	8003cc8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c80:	f000 faa6 	bl	80041d0 <prvIsQueueFull>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d018      	beq.n	8003cbc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	3310      	adds	r3, #16
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 ff52 	bl	8004b3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c9a:	f000 fa31 	bl	8004100 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c9e:	f000 fd7f 	bl	80047a0 <xTaskResumeAll>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f af7c 	bne.w	8003ba2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003caa:	4b0c      	ldr	r3, [pc, #48]	@ (8003cdc <xQueueGenericSend+0x200>)
 8003cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	e772      	b.n	8003ba2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cbe:	f000 fa1f 	bl	8004100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cc2:	f000 fd6d 	bl	80047a0 <xTaskResumeAll>
 8003cc6:	e76c      	b.n	8003ba2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cca:	f000 fa19 	bl	8004100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cce:	f000 fd67 	bl	80047a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3738      	adds	r7, #56	@ 0x38
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	e000ed04 	.word	0xe000ed04

08003ce0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b090      	sub	sp, #64	@ 0x40
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
 8003d0e:	e7fd      	b.n	8003d0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <xQueueGenericSendFromISR+0x3e>
 8003d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <xQueueGenericSendFromISR+0x42>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <xQueueGenericSendFromISR+0x44>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d103      	bne.n	8003d4e <xQueueGenericSendFromISR+0x6e>
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <xQueueGenericSendFromISR+0x72>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <xQueueGenericSendFromISR+0x74>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	623b      	str	r3, [r7, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
 8003d6e:	e7fd      	b.n	8003d6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d70:	f001 ff4a 	bl	8005c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d74:	f3ef 8211 	mrs	r2, BASEPRI
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	61fa      	str	r2, [r7, #28]
 8003d8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d302      	bcc.n	8003da2 <xQueueGenericSendFromISR+0xc2>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d12f      	bne.n	8003e02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003da8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003db8:	f000 f912 	bl	8003fe0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003dbc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d112      	bne.n	8003dec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	3324      	adds	r3, #36	@ 0x24
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 ff04 	bl	8004be0 <xTaskRemoveFromEventList>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00e      	beq.n	8003dfc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e007      	b.n	8003dfc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003df0:	3301      	adds	r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	b25a      	sxtb	r2, r3
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003e00:	e001      	b.n	8003e06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3740      	adds	r7, #64	@ 0x40
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08c      	sub	sp, #48	@ 0x30
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <xQueueReceive+0x32>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	623b      	str	r3, [r7, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d103      	bne.n	8003e5c <xQueueReceive+0x40>
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <xQueueReceive+0x44>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <xQueueReceive+0x46>
 8003e60:	2300      	movs	r3, #0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <xQueueReceive+0x62>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	61fb      	str	r3, [r7, #28]
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e7e:	f001 f875 	bl	8004f6c <xTaskGetSchedulerState>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <xQueueReceive+0x72>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <xQueueReceive+0x76>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <xQueueReceive+0x78>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <xQueueReceive+0x94>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	61bb      	str	r3, [r7, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eb0:	f001 fdca 	bl	8005a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01f      	beq.n	8003f00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ec4:	f000 f8f6 	bl	80040b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	1e5a      	subs	r2, r3, #1
 8003ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ece:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00f      	beq.n	8003ef8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	3310      	adds	r3, #16
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fe7f 	bl	8004be0 <xTaskRemoveFromEventList>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8003fdc <xQueueReceive+0x1c0>)
 8003eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ef8:	f001 fdd8 	bl	8005aac <vPortExitCritical>
				return pdPASS;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e069      	b.n	8003fd4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f06:	f001 fdd1 	bl	8005aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e062      	b.n	8003fd4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f14:	f107 0310 	add.w	r3, r7, #16
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fec5 	bl	8004ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f22:	f001 fdc3 	bl	8005aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f26:	f000 fc2d 	bl	8004784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f2a:	f001 fd8d 	bl	8005a48 <vPortEnterCritical>
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d103      	bne.n	8003f44 <xQueueReceive+0x128>
 8003f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d103      	bne.n	8003f5a <xQueueReceive+0x13e>
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f5a:	f001 fda7 	bl	8005aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f5e:	1d3a      	adds	r2, r7, #4
 8003f60:	f107 0310 	add.w	r3, r7, #16
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 feb4 	bl	8004cd4 <xTaskCheckForTimeOut>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d123      	bne.n	8003fba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f74:	f000 f916 	bl	80041a4 <prvIsQueueEmpty>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	3324      	adds	r3, #36	@ 0x24
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fdd8 	bl	8004b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f8e:	f000 f8b7 	bl	8004100 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f92:	f000 fc05 	bl	80047a0 <xTaskResumeAll>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d189      	bne.n	8003eb0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fdc <xQueueReceive+0x1c0>)
 8003f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	e780      	b.n	8003eb0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fb0:	f000 f8a6 	bl	8004100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fb4:	f000 fbf4 	bl	80047a0 <xTaskResumeAll>
 8003fb8:	e77a      	b.n	8003eb0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fbc:	f000 f8a0 	bl	8004100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fc0:	f000 fbee 	bl	80047a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fc6:	f000 f8ed 	bl	80041a4 <prvIsQueueEmpty>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f43f af6f 	beq.w	8003eb0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3730      	adds	r7, #48	@ 0x30
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10d      	bne.n	800401a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d14d      	bne.n	80040a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 ffcc 	bl	8004fa8 <xTaskPriorityDisinherit>
 8004010:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	e043      	b.n	80040a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d119      	bne.n	8004054 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6858      	ldr	r0, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	461a      	mov	r2, r3
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	f002 f8a0 	bl	8006170 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004038:	441a      	add	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	d32b      	bcc.n	80040a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	e026      	b.n	80040a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68d8      	ldr	r0, [r3, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	461a      	mov	r2, r3
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	f002 f886 	bl	8006170 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	425b      	negs	r3, r3
 800406e:	441a      	add	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d207      	bcs.n	8004090 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	425b      	negs	r3, r3
 800408a:	441a      	add	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d105      	bne.n	80040a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	3b01      	subs	r3, #1
 80040a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040aa:	697b      	ldr	r3, [r7, #20]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d303      	bcc.n	80040e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68d9      	ldr	r1, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	461a      	mov	r2, r3
 80040f2:	6838      	ldr	r0, [r7, #0]
 80040f4:	f002 f83c 	bl	8006170 <memcpy>
	}
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004108:	f001 fc9e 	bl	8005a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004112:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004114:	e011      	b.n	800413a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d012      	beq.n	8004144 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3324      	adds	r3, #36	@ 0x24
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fd5c 	bl	8004be0 <xTaskRemoveFromEventList>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800412e:	f000 fe35 	bl	8004d9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	3b01      	subs	r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800413a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	dce9      	bgt.n	8004116 <prvUnlockQueue+0x16>
 8004142:	e000      	b.n	8004146 <prvUnlockQueue+0x46>
					break;
 8004144:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	22ff      	movs	r2, #255	@ 0xff
 800414a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800414e:	f001 fcad 	bl	8005aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004152:	f001 fc79 	bl	8005a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800415c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800415e:	e011      	b.n	8004184 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3310      	adds	r3, #16
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fd37 	bl	8004be0 <xTaskRemoveFromEventList>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004178:	f000 fe10 	bl	8004d9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800417c:	7bbb      	ldrb	r3, [r7, #14]
 800417e:	3b01      	subs	r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dce9      	bgt.n	8004160 <prvUnlockQueue+0x60>
 800418c:	e000      	b.n	8004190 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800418e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	22ff      	movs	r2, #255	@ 0xff
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004198:	f001 fc88 	bl	8005aac <vPortExitCritical>
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041ac:	f001 fc4c 	bl	8005a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e001      	b.n	80041c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041c2:	f001 fc73 	bl	8005aac <vPortExitCritical>

	return xReturn;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041d8:	f001 fc36 	bl	8005a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d102      	bne.n	80041ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e001      	b.n	80041f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041f2:	f001 fc5b 	bl	8005aac <vPortExitCritical>

	return xReturn;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e014      	b.n	800423a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004210:	4a0f      	ldr	r2, [pc, #60]	@ (8004250 <vQueueAddToRegistry+0x50>)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800421c:	490c      	ldr	r1, [pc, #48]	@ (8004250 <vQueueAddToRegistry+0x50>)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004226:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <vQueueAddToRegistry+0x50>)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004232:	e006      	b.n	8004242 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b07      	cmp	r3, #7
 800423e:	d9e7      	bls.n	8004210 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	200008bc 	.word	0x200008bc

08004254 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004264:	f001 fbf0 	bl	8005a48 <vPortEnterCritical>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800426e:	b25b      	sxtb	r3, r3
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d103      	bne.n	800427e <vQueueWaitForMessageRestricted+0x2a>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004284:	b25b      	sxtb	r3, r3
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d103      	bne.n	8004294 <vQueueWaitForMessageRestricted+0x40>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004294:	f001 fc0a 	bl	8005aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	3324      	adds	r3, #36	@ 0x24
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fc6d 	bl	8004b88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042ae:	6978      	ldr	r0, [r7, #20]
 80042b0:	f7ff ff26 	bl	8004100 <prvUnlockQueue>
	}
 80042b4:	bf00      	nop
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08e      	sub	sp, #56	@ 0x38
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	623b      	str	r3, [r7, #32]
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <xTaskCreateStatic+0x4a>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	61fb      	str	r3, [r7, #28]
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	e7fd      	b.n	8004302 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004306:	23a8      	movs	r3, #168	@ 0xa8
 8004308:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2ba8      	cmp	r3, #168	@ 0xa8
 800430e:	d00b      	beq.n	8004328 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	61bb      	str	r3, [r7, #24]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004328:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01e      	beq.n	800436e <xTaskCreateStatic+0xb2>
 8004330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01b      	beq.n	800436e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	2202      	movs	r2, #2
 8004344:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004348:	2300      	movs	r3, #0
 800434a:	9303      	str	r3, [sp, #12]
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	9302      	str	r3, [sp, #8]
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68b9      	ldr	r1, [r7, #8]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f851 	bl	8004408 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004366:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004368:	f000 f8f6 	bl	8004558 <prvAddNewTaskToReadyList>
 800436c:	e001      	b.n	8004372 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004372:	697b      	ldr	r3, [r7, #20]
	}
 8004374:	4618      	mov	r0, r3
 8004376:	3728      	adds	r7, #40	@ 0x28
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	@ 0x30
 8004380:	af04      	add	r7, sp, #16
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4618      	mov	r0, r3
 8004392:	f001 fc7b 	bl	8005c8c <pvPortMalloc>
 8004396:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00e      	beq.n	80043bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800439e:	20a8      	movs	r0, #168	@ 0xa8
 80043a0:	f001 fc74 	bl	8005c8c <pvPortMalloc>
 80043a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80043b2:	e005      	b.n	80043c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043b4:	6978      	ldr	r0, [r7, #20]
 80043b6:	f001 fd37 	bl	8005e28 <vPortFree>
 80043ba:	e001      	b.n	80043c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d017      	beq.n	80043f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	2300      	movs	r3, #0
 80043d2:	9303      	str	r3, [sp, #12]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	9302      	str	r3, [sp, #8]
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f80f 	bl	8004408 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ea:	69f8      	ldr	r0, [r7, #28]
 80043ec:	f000 f8b4 	bl	8004558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043f0:	2301      	movs	r3, #1
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	e002      	b.n	80043fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043fc:	69bb      	ldr	r3, [r7, #24]
	}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	461a      	mov	r2, r3
 8004420:	21a5      	movs	r1, #165	@ 0xa5
 8004422:	f001 fe21 	bl	8006068 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004430:	3b01      	subs	r3, #1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	617b      	str	r3, [r7, #20]
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	e7fd      	b.n	800445e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01f      	beq.n	80044a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	e012      	b.n	8004494 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	7819      	ldrb	r1, [r3, #0]
 8004476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	3334      	adds	r3, #52	@ 0x34
 800447e:	460a      	mov	r2, r1
 8004480:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3301      	adds	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	d9e9      	bls.n	800446e <prvInitialiseNewTask+0x66>
 800449a:	e000      	b.n	800449e <prvInitialiseNewTask+0x96>
			{
				break;
 800449c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044a6:	e003      	b.n	80044b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b2:	2b37      	cmp	r3, #55	@ 0x37
 80044b4:	d901      	bls.n	80044ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044b6:	2337      	movs	r3, #55	@ 0x37
 80044b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	3304      	adds	r3, #4
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff f929 	bl	8003728 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	3318      	adds	r3, #24
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff f924 	bl	8003728 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	2200      	movs	r2, #0
 8004502:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	3354      	adds	r3, #84	@ 0x54
 800450a:	224c      	movs	r2, #76	@ 0x4c
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f001 fdaa 	bl	8006068 <memset>
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	4a0d      	ldr	r2, [pc, #52]	@ (800454c <prvInitialiseNewTask+0x144>)
 8004518:	659a      	str	r2, [r3, #88]	@ 0x58
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	4a0c      	ldr	r2, [pc, #48]	@ (8004550 <prvInitialiseNewTask+0x148>)
 800451e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	4a0c      	ldr	r2, [pc, #48]	@ (8004554 <prvInitialiseNewTask+0x14c>)
 8004524:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	68f9      	ldr	r1, [r7, #12]
 800452a:	69b8      	ldr	r0, [r7, #24]
 800452c:	f001 f95a 	bl	80057e4 <pxPortInitialiseStack>
 8004530:	4602      	mov	r2, r0
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800453c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004542:	bf00      	nop
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20004b50 	.word	0x20004b50
 8004550:	20004bb8 	.word	0x20004bb8
 8004554:	20004c20 	.word	0x20004c20

08004558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004560:	f001 fa72 	bl	8005a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004564:	4b2d      	ldr	r3, [pc, #180]	@ (800461c <prvAddNewTaskToReadyList+0xc4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	4a2c      	ldr	r2, [pc, #176]	@ (800461c <prvAddNewTaskToReadyList+0xc4>)
 800456c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800456e:	4b2c      	ldr	r3, [pc, #176]	@ (8004620 <prvAddNewTaskToReadyList+0xc8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004576:	4a2a      	ldr	r2, [pc, #168]	@ (8004620 <prvAddNewTaskToReadyList+0xc8>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800457c:	4b27      	ldr	r3, [pc, #156]	@ (800461c <prvAddNewTaskToReadyList+0xc4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d110      	bne.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004584:	f000 fc2e 	bl	8004de4 <prvInitialiseTaskLists>
 8004588:	e00d      	b.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800458a:	4b26      	ldr	r3, [pc, #152]	@ (8004624 <prvAddNewTaskToReadyList+0xcc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004592:	4b23      	ldr	r3, [pc, #140]	@ (8004620 <prvAddNewTaskToReadyList+0xc8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d802      	bhi.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004620 <prvAddNewTaskToReadyList+0xc8>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045a6:	4b20      	ldr	r3, [pc, #128]	@ (8004628 <prvAddNewTaskToReadyList+0xd0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004628 <prvAddNewTaskToReadyList+0xd0>)
 80045ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <prvAddNewTaskToReadyList+0xd0>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045bc:	4b1b      	ldr	r3, [pc, #108]	@ (800462c <prvAddNewTaskToReadyList+0xd4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <prvAddNewTaskToReadyList+0x74>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	4a18      	ldr	r2, [pc, #96]	@ (800462c <prvAddNewTaskToReadyList+0xd4>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a15      	ldr	r2, [pc, #84]	@ (8004630 <prvAddNewTaskToReadyList+0xd8>)
 80045da:	441a      	add	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f7ff f8ad 	bl	8003742 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045e8:	f001 fa60 	bl	8005aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <prvAddNewTaskToReadyList+0xcc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004620 <prvAddNewTaskToReadyList+0xc8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	429a      	cmp	r2, r3
 8004600:	d207      	bcs.n	8004612 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004602:	4b0c      	ldr	r3, [pc, #48]	@ (8004634 <prvAddNewTaskToReadyList+0xdc>)
 8004604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000dd0 	.word	0x20000dd0
 8004620:	200008fc 	.word	0x200008fc
 8004624:	20000ddc 	.word	0x20000ddc
 8004628:	20000dec 	.word	0x20000dec
 800462c:	20000dd8 	.word	0x20000dd8
 8004630:	20000900 	.word	0x20000900
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800464a:	4b14      	ldr	r3, [pc, #80]	@ (800469c <vTaskDelay+0x64>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <vTaskDelay+0x32>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60bb      	str	r3, [r7, #8]
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	e7fd      	b.n	8004666 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800466a:	f000 f88b 	bl	8004784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800466e:	2100      	movs	r1, #0
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fd09 	bl	8005088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004676:	f000 f893 	bl	80047a0 <xTaskResumeAll>
 800467a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004682:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <vTaskDelay+0x68>)
 8004684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000df8 	.word	0x20000df8
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	@ 0x28
 80046a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046b2:	463a      	mov	r2, r7
 80046b4:	1d39      	adds	r1, r7, #4
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe ffe0 	bl	8003680 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046c0:	6839      	ldr	r1, [r7, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	9202      	str	r2, [sp, #8]
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	2300      	movs	r3, #0
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2300      	movs	r3, #0
 80046d0:	460a      	mov	r2, r1
 80046d2:	4924      	ldr	r1, [pc, #144]	@ (8004764 <vTaskStartScheduler+0xc0>)
 80046d4:	4824      	ldr	r0, [pc, #144]	@ (8004768 <vTaskStartScheduler+0xc4>)
 80046d6:	f7ff fdf1 	bl	80042bc <xTaskCreateStatic>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a23      	ldr	r2, [pc, #140]	@ (800476c <vTaskStartScheduler+0xc8>)
 80046de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046e0:	4b22      	ldr	r3, [pc, #136]	@ (800476c <vTaskStartScheduler+0xc8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046e8:	2301      	movs	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e001      	b.n	80046f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046f8:	f000 fd1a 	bl	8005130 <xTimerCreateTimerTask>
 80046fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d11b      	bne.n	800473c <vTaskStartScheduler+0x98>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	613b      	str	r3, [r7, #16]
}
 8004716:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004718:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <vTaskStartScheduler+0xcc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3354      	adds	r3, #84	@ 0x54
 800471e:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <vTaskStartScheduler+0xd0>)
 8004720:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004722:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <vTaskStartScheduler+0xd4>)
 8004724:	f04f 32ff 	mov.w	r2, #4294967295
 8004728:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800472a:	4b14      	ldr	r3, [pc, #80]	@ (800477c <vTaskStartScheduler+0xd8>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <vTaskStartScheduler+0xdc>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004736:	f001 f8e3 	bl	8005900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800473a:	e00f      	b.n	800475c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d10b      	bne.n	800475c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60fb      	str	r3, [r7, #12]
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <vTaskStartScheduler+0xb4>
}
 800475c:	bf00      	nop
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	08006268 	.word	0x08006268
 8004768:	08004db5 	.word	0x08004db5
 800476c:	20000df4 	.word	0x20000df4
 8004770:	200008fc 	.word	0x200008fc
 8004774:	20000010 	.word	0x20000010
 8004778:	20000df0 	.word	0x20000df0
 800477c:	20000ddc 	.word	0x20000ddc
 8004780:	20000dd4 	.word	0x20000dd4

08004784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004788:	4b04      	ldr	r3, [pc, #16]	@ (800479c <vTaskSuspendAll+0x18>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a03      	ldr	r2, [pc, #12]	@ (800479c <vTaskSuspendAll+0x18>)
 8004790:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	20000df8 	.word	0x20000df8

080047a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ae:	4b42      	ldr	r3, [pc, #264]	@ (80048b8 <xTaskResumeAll+0x118>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <xTaskResumeAll+0x2e>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	603b      	str	r3, [r7, #0]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ce:	f001 f93b 	bl	8005a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047d2:	4b39      	ldr	r3, [pc, #228]	@ (80048b8 <xTaskResumeAll+0x118>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	4a37      	ldr	r2, [pc, #220]	@ (80048b8 <xTaskResumeAll+0x118>)
 80047da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047dc:	4b36      	ldr	r3, [pc, #216]	@ (80048b8 <xTaskResumeAll+0x118>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d162      	bne.n	80048aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047e4:	4b35      	ldr	r3, [pc, #212]	@ (80048bc <xTaskResumeAll+0x11c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05e      	beq.n	80048aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ec:	e02f      	b.n	800484e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ee:	4b34      	ldr	r3, [pc, #208]	@ (80048c0 <xTaskResumeAll+0x120>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3318      	adds	r3, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fffe 	bl	80037fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fff9 	bl	80037fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480e:	4b2d      	ldr	r3, [pc, #180]	@ (80048c4 <xTaskResumeAll+0x124>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d903      	bls.n	800481e <xTaskResumeAll+0x7e>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	4a2a      	ldr	r2, [pc, #168]	@ (80048c4 <xTaskResumeAll+0x124>)
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4a27      	ldr	r2, [pc, #156]	@ (80048c8 <xTaskResumeAll+0x128>)
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3304      	adds	r3, #4
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f7fe ff84 	bl	8003742 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483e:	4b23      	ldr	r3, [pc, #140]	@ (80048cc <xTaskResumeAll+0x12c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	429a      	cmp	r2, r3
 8004846:	d302      	bcc.n	800484e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004848:	4b21      	ldr	r3, [pc, #132]	@ (80048d0 <xTaskResumeAll+0x130>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800484e:	4b1c      	ldr	r3, [pc, #112]	@ (80048c0 <xTaskResumeAll+0x120>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1cb      	bne.n	80047ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800485c:	f000 fb66 	bl	8004f2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004860:	4b1c      	ldr	r3, [pc, #112]	@ (80048d4 <xTaskResumeAll+0x134>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800486c:	f000 f846 	bl	80048fc <xTaskIncrementTick>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004876:	4b16      	ldr	r3, [pc, #88]	@ (80048d0 <xTaskResumeAll+0x130>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3b01      	subs	r3, #1
 8004880:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f1      	bne.n	800486c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004888:	4b12      	ldr	r3, [pc, #72]	@ (80048d4 <xTaskResumeAll+0x134>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800488e:	4b10      	ldr	r3, [pc, #64]	@ (80048d0 <xTaskResumeAll+0x130>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004896:	2301      	movs	r3, #1
 8004898:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800489a:	4b0f      	ldr	r3, [pc, #60]	@ (80048d8 <xTaskResumeAll+0x138>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048aa:	f001 f8ff 	bl	8005aac <vPortExitCritical>

	return xAlreadyYielded;
 80048ae:	68bb      	ldr	r3, [r7, #8]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000df8 	.word	0x20000df8
 80048bc:	20000dd0 	.word	0x20000dd0
 80048c0:	20000d90 	.word	0x20000d90
 80048c4:	20000dd8 	.word	0x20000dd8
 80048c8:	20000900 	.word	0x20000900
 80048cc:	200008fc 	.word	0x200008fc
 80048d0:	20000de4 	.word	0x20000de4
 80048d4:	20000de0 	.word	0x20000de0
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048e2:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <xTaskGetTickCount+0x1c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048e8:	687b      	ldr	r3, [r7, #4]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000dd4 	.word	0x20000dd4

080048fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004906:	4b4f      	ldr	r3, [pc, #316]	@ (8004a44 <xTaskIncrementTick+0x148>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 8090 	bne.w	8004a30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004910:	4b4d      	ldr	r3, [pc, #308]	@ (8004a48 <xTaskIncrementTick+0x14c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3301      	adds	r3, #1
 8004916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004918:	4a4b      	ldr	r2, [pc, #300]	@ (8004a48 <xTaskIncrementTick+0x14c>)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d121      	bne.n	8004968 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004924:	4b49      	ldr	r3, [pc, #292]	@ (8004a4c <xTaskIncrementTick+0x150>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <xTaskIncrementTick+0x4a>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	603b      	str	r3, [r7, #0]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <xTaskIncrementTick+0x46>
 8004946:	4b41      	ldr	r3, [pc, #260]	@ (8004a4c <xTaskIncrementTick+0x150>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	4b40      	ldr	r3, [pc, #256]	@ (8004a50 <xTaskIncrementTick+0x154>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3e      	ldr	r2, [pc, #248]	@ (8004a4c <xTaskIncrementTick+0x150>)
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4a3e      	ldr	r2, [pc, #248]	@ (8004a50 <xTaskIncrementTick+0x154>)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a54 <xTaskIncrementTick+0x158>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	4a3c      	ldr	r2, [pc, #240]	@ (8004a54 <xTaskIncrementTick+0x158>)
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	f000 fae2 	bl	8004f2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004968:	4b3b      	ldr	r3, [pc, #236]	@ (8004a58 <xTaskIncrementTick+0x15c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	429a      	cmp	r2, r3
 8004970:	d349      	bcc.n	8004a06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004972:	4b36      	ldr	r3, [pc, #216]	@ (8004a4c <xTaskIncrementTick+0x150>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d104      	bne.n	8004986 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497c:	4b36      	ldr	r3, [pc, #216]	@ (8004a58 <xTaskIncrementTick+0x15c>)
 800497e:	f04f 32ff 	mov.w	r2, #4294967295
 8004982:	601a      	str	r2, [r3, #0]
					break;
 8004984:	e03f      	b.n	8004a06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004986:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <xTaskIncrementTick+0x150>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d203      	bcs.n	80049a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800499e:	4a2e      	ldr	r2, [pc, #184]	@ (8004a58 <xTaskIncrementTick+0x15c>)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049a4:	e02f      	b.n	8004a06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe ff26 	bl	80037fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	3318      	adds	r3, #24
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe ff1d 	bl	80037fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c6:	4b25      	ldr	r3, [pc, #148]	@ (8004a5c <xTaskIncrementTick+0x160>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d903      	bls.n	80049d6 <xTaskIncrementTick+0xda>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	4a22      	ldr	r2, [pc, #136]	@ (8004a5c <xTaskIncrementTick+0x160>)
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a60 <xTaskIncrementTick+0x164>)
 80049e4:	441a      	add	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f7fe fea8 	bl	8003742 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a64 <xTaskIncrementTick+0x168>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3b8      	bcc.n	8004972 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a00:	2301      	movs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a04:	e7b5      	b.n	8004972 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a06:	4b17      	ldr	r3, [pc, #92]	@ (8004a64 <xTaskIncrementTick+0x168>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0c:	4914      	ldr	r1, [pc, #80]	@ (8004a60 <xTaskIncrementTick+0x164>)
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d901      	bls.n	8004a22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a22:	4b11      	ldr	r3, [pc, #68]	@ (8004a68 <xTaskIncrementTick+0x16c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e004      	b.n	8004a3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a30:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <xTaskIncrementTick+0x170>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	4a0d      	ldr	r2, [pc, #52]	@ (8004a6c <xTaskIncrementTick+0x170>)
 8004a38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a3a:	697b      	ldr	r3, [r7, #20]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000df8 	.word	0x20000df8
 8004a48:	20000dd4 	.word	0x20000dd4
 8004a4c:	20000d88 	.word	0x20000d88
 8004a50:	20000d8c 	.word	0x20000d8c
 8004a54:	20000de8 	.word	0x20000de8
 8004a58:	20000df0 	.word	0x20000df0
 8004a5c:	20000dd8 	.word	0x20000dd8
 8004a60:	20000900 	.word	0x20000900
 8004a64:	200008fc 	.word	0x200008fc
 8004a68:	20000de4 	.word	0x20000de4
 8004a6c:	20000de0 	.word	0x20000de0

08004a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a76:	4b2b      	ldr	r3, [pc, #172]	@ (8004b24 <vTaskSwitchContext+0xb4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b28 <vTaskSwitchContext+0xb8>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a84:	e047      	b.n	8004b16 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004a86:	4b28      	ldr	r3, [pc, #160]	@ (8004b28 <vTaskSwitchContext+0xb8>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a8c:	4b27      	ldr	r3, [pc, #156]	@ (8004b2c <vTaskSwitchContext+0xbc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e011      	b.n	8004ab8 <vTaskSwitchContext+0x48>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10b      	bne.n	8004ab2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	607b      	str	r3, [r7, #4]
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	e7fd      	b.n	8004aae <vTaskSwitchContext+0x3e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	491d      	ldr	r1, [pc, #116]	@ (8004b30 <vTaskSwitchContext+0xc0>)
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0e3      	beq.n	8004a94 <vTaskSwitchContext+0x24>
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4a16      	ldr	r2, [pc, #88]	@ (8004b30 <vTaskSwitchContext+0xc0>)
 8004ad8:	4413      	add	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3308      	adds	r3, #8
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d104      	bne.n	8004afc <vTaskSwitchContext+0x8c>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	4a0c      	ldr	r2, [pc, #48]	@ (8004b34 <vTaskSwitchContext+0xc4>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4a09      	ldr	r2, [pc, #36]	@ (8004b2c <vTaskSwitchContext+0xbc>)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b0c:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <vTaskSwitchContext+0xc4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3354      	adds	r3, #84	@ 0x54
 8004b12:	4a09      	ldr	r2, [pc, #36]	@ (8004b38 <vTaskSwitchContext+0xc8>)
 8004b14:	6013      	str	r3, [r2, #0]
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000df8 	.word	0x20000df8
 8004b28:	20000de4 	.word	0x20000de4
 8004b2c:	20000dd8 	.word	0x20000dd8
 8004b30:	20000900 	.word	0x20000900
 8004b34:	200008fc 	.word	0x200008fc
 8004b38:	20000010 	.word	0x20000010

08004b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60fb      	str	r3, [r7, #12]
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b64:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <vTaskPlaceOnEventList+0x48>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3318      	adds	r3, #24
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fe fe0c 	bl	800378a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b72:	2101      	movs	r1, #1
 8004b74:	6838      	ldr	r0, [r7, #0]
 8004b76:	f000 fa87 	bl	8005088 <prvAddCurrentTaskToDelayedList>
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	200008fc 	.word	0x200008fc

08004b88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	617b      	str	r3, [r7, #20]
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	e7fd      	b.n	8004bae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <vTaskPlaceOnEventListRestricted+0x54>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7fe fdc1 	bl	8003742 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	68b8      	ldr	r0, [r7, #8]
 8004bd0:	f000 fa5a 	bl	8005088 <prvAddCurrentTaskToDelayedList>
	}
 8004bd4:	bf00      	nop
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	200008fc 	.word	0x200008fc

08004be0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	60fb      	str	r3, [r7, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	e7fd      	b.n	8004c0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	3318      	adds	r3, #24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe fdf2 	bl	80037fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c18:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <xTaskRemoveFromEventList+0xb0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d11d      	bne.n	8004c5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe fde9 	bl	80037fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2e:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <xTaskRemoveFromEventList+0xb4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d903      	bls.n	8004c3e <xTaskRemoveFromEventList+0x5e>
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	4a16      	ldr	r2, [pc, #88]	@ (8004c94 <xTaskRemoveFromEventList+0xb4>)
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4a13      	ldr	r2, [pc, #76]	@ (8004c98 <xTaskRemoveFromEventList+0xb8>)
 8004c4c:	441a      	add	r2, r3
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f7fe fd74 	bl	8003742 <vListInsertEnd>
 8004c5a:	e005      	b.n	8004c68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3318      	adds	r3, #24
 8004c60:	4619      	mov	r1, r3
 8004c62:	480e      	ldr	r0, [pc, #56]	@ (8004c9c <xTaskRemoveFromEventList+0xbc>)
 8004c64:	f7fe fd6d 	bl	8003742 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <xTaskRemoveFromEventList+0xc0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d905      	bls.n	8004c82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c76:	2301      	movs	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca4 <xTaskRemoveFromEventList+0xc4>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e001      	b.n	8004c86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c86:	697b      	ldr	r3, [r7, #20]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000df8 	.word	0x20000df8
 8004c94:	20000dd8 	.word	0x20000dd8
 8004c98:	20000900 	.word	0x20000900
 8004c9c:	20000d90 	.word	0x20000d90
 8004ca0:	200008fc 	.word	0x200008fc
 8004ca4:	20000de4 	.word	0x20000de4

08004ca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cb0:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <vTaskInternalSetTimeOutState+0x24>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <vTaskInternalSetTimeOutState+0x28>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	605a      	str	r2, [r3, #4]
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20000de8 	.word	0x20000de8
 8004cd0:	20000dd4 	.word	0x20000dd4

08004cd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	613b      	str	r3, [r7, #16]
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	e7fd      	b.n	8004cf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60fb      	str	r3, [r7, #12]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d1a:	f000 fe95 	bl	8005a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <xTaskCheckForTimeOut+0xc0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d102      	bne.n	8004d3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e023      	b.n	8004d86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b15      	ldr	r3, [pc, #84]	@ (8004d98 <xTaskCheckForTimeOut+0xc4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d007      	beq.n	8004d5a <xTaskCheckForTimeOut+0x86>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d54:	2301      	movs	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	e015      	b.n	8004d86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d20b      	bcs.n	8004d7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	1ad2      	subs	r2, r2, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ff99 	bl	8004ca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	e004      	b.n	8004d86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d86:	f000 fe91 	bl	8005aac <vPortExitCritical>

	return xReturn;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000dd4 	.word	0x20000dd4
 8004d98:	20000de8 	.word	0x20000de8

08004d9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004da0:	4b03      	ldr	r3, [pc, #12]	@ (8004db0 <vTaskMissedYield+0x14>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	20000de4 	.word	0x20000de4

08004db4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dbc:	f000 f852 	bl	8004e64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dc0:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <prvIdleTask+0x28>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d9f9      	bls.n	8004dbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <prvIdleTask+0x2c>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dd8:	e7f0      	b.n	8004dbc <prvIdleTask+0x8>
 8004dda:	bf00      	nop
 8004ddc:	20000900 	.word	0x20000900
 8004de0:	e000ed04 	.word	0xe000ed04

08004de4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dea:	2300      	movs	r3, #0
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	e00c      	b.n	8004e0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4a12      	ldr	r2, [pc, #72]	@ (8004e44 <prvInitialiseTaskLists+0x60>)
 8004dfc:	4413      	add	r3, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe fc72 	bl	80036e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3301      	adds	r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b37      	cmp	r3, #55	@ 0x37
 8004e0e:	d9ef      	bls.n	8004df0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e10:	480d      	ldr	r0, [pc, #52]	@ (8004e48 <prvInitialiseTaskLists+0x64>)
 8004e12:	f7fe fc69 	bl	80036e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e16:	480d      	ldr	r0, [pc, #52]	@ (8004e4c <prvInitialiseTaskLists+0x68>)
 8004e18:	f7fe fc66 	bl	80036e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e1c:	480c      	ldr	r0, [pc, #48]	@ (8004e50 <prvInitialiseTaskLists+0x6c>)
 8004e1e:	f7fe fc63 	bl	80036e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e22:	480c      	ldr	r0, [pc, #48]	@ (8004e54 <prvInitialiseTaskLists+0x70>)
 8004e24:	f7fe fc60 	bl	80036e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e28:	480b      	ldr	r0, [pc, #44]	@ (8004e58 <prvInitialiseTaskLists+0x74>)
 8004e2a:	f7fe fc5d 	bl	80036e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e5c <prvInitialiseTaskLists+0x78>)
 8004e30:	4a05      	ldr	r2, [pc, #20]	@ (8004e48 <prvInitialiseTaskLists+0x64>)
 8004e32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e34:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <prvInitialiseTaskLists+0x7c>)
 8004e36:	4a05      	ldr	r2, [pc, #20]	@ (8004e4c <prvInitialiseTaskLists+0x68>)
 8004e38:	601a      	str	r2, [r3, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000900 	.word	0x20000900
 8004e48:	20000d60 	.word	0x20000d60
 8004e4c:	20000d74 	.word	0x20000d74
 8004e50:	20000d90 	.word	0x20000d90
 8004e54:	20000da4 	.word	0x20000da4
 8004e58:	20000dbc 	.word	0x20000dbc
 8004e5c:	20000d88 	.word	0x20000d88
 8004e60:	20000d8c 	.word	0x20000d8c

08004e64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e6a:	e019      	b.n	8004ea0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e6c:	f000 fdec 	bl	8005a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e70:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <prvCheckTasksWaitingTermination+0x50>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe fcbd 	bl	80037fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <prvCheckTasksWaitingTermination+0x54>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	4a0b      	ldr	r2, [pc, #44]	@ (8004eb8 <prvCheckTasksWaitingTermination+0x54>)
 8004e8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <prvCheckTasksWaitingTermination+0x58>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <prvCheckTasksWaitingTermination+0x58>)
 8004e94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e96:	f000 fe09 	bl	8005aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f810 	bl	8004ec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ea0:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <prvCheckTasksWaitingTermination+0x58>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e1      	bne.n	8004e6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000da4 	.word	0x20000da4
 8004eb8:	20000dd0 	.word	0x20000dd0
 8004ebc:	20000db8 	.word	0x20000db8

08004ec0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3354      	adds	r3, #84	@ 0x54
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f001 f8d3 	bl	8006078 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d108      	bne.n	8004eee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 ffa1 	bl	8005e28 <vPortFree>
				vPortFree( pxTCB );
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 ff9e 	bl	8005e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eec:	e019      	b.n	8004f22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d103      	bne.n	8004f00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 ff95 	bl	8005e28 <vPortFree>
	}
 8004efe:	e010      	b.n	8004f22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d00b      	beq.n	8004f22 <prvDeleteTCB+0x62>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	60fb      	str	r3, [r7, #12]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <prvDeleteTCB+0x5e>
	}
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f32:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <prvResetNextTaskUnblockTime+0x38>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <prvResetNextTaskUnblockTime+0x3c>)
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f44:	e008      	b.n	8004f58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f46:	4b07      	ldr	r3, [pc, #28]	@ (8004f64 <prvResetNextTaskUnblockTime+0x38>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a04      	ldr	r2, [pc, #16]	@ (8004f68 <prvResetNextTaskUnblockTime+0x3c>)
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000d88 	.word	0x20000d88
 8004f68:	20000df0 	.word	0x20000df0

08004f6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f72:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <xTaskGetSchedulerState+0x34>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d102      	bne.n	8004f80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	e008      	b.n	8004f92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f80:	4b08      	ldr	r3, [pc, #32]	@ (8004fa4 <xTaskGetSchedulerState+0x38>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	e001      	b.n	8004f92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f92:	687b      	ldr	r3, [r7, #4]
	}
 8004f94:	4618      	mov	r0, r3
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	20000ddc 	.word	0x20000ddc
 8004fa4:	20000df8 	.word	0x20000df8

08004fa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d058      	beq.n	8005070 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800507c <xTaskPriorityDisinherit+0xd4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d00b      	beq.n	8004fe0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60fb      	str	r3, [r7, #12]
}
 8004fda:	bf00      	nop
 8004fdc:	bf00      	nop
 8004fde:	e7fd      	b.n	8004fdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	60bb      	str	r3, [r7, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	e7fd      	b.n	8004ffc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005012:	429a      	cmp	r2, r3
 8005014:	d02c      	beq.n	8005070 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501a:	2b00      	cmp	r3, #0
 800501c:	d128      	bne.n	8005070 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3304      	adds	r3, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe fbea 	bl	80037fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005040:	4b0f      	ldr	r3, [pc, #60]	@ (8005080 <xTaskPriorityDisinherit+0xd8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d903      	bls.n	8005050 <xTaskPriorityDisinherit+0xa8>
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	4a0c      	ldr	r2, [pc, #48]	@ (8005080 <xTaskPriorityDisinherit+0xd8>)
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a09      	ldr	r2, [pc, #36]	@ (8005084 <xTaskPriorityDisinherit+0xdc>)
 800505e:	441a      	add	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fe fb6b 	bl	8003742 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005070:	697b      	ldr	r3, [r7, #20]
	}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200008fc 	.word	0x200008fc
 8005080:	20000dd8 	.word	0x20000dd8
 8005084:	20000900 	.word	0x20000900

08005088 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005092:	4b21      	ldr	r3, [pc, #132]	@ (8005118 <prvAddCurrentTaskToDelayedList+0x90>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005098:	4b20      	ldr	r3, [pc, #128]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3304      	adds	r3, #4
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fbac 	bl	80037fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d10a      	bne.n	80050c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b2:	4b1a      	ldr	r3, [pc, #104]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4819      	ldr	r0, [pc, #100]	@ (8005120 <prvAddCurrentTaskToDelayedList+0x98>)
 80050bc:	f7fe fb41 	bl	8003742 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050c0:	e026      	b.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4413      	add	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ca:	4b14      	ldr	r3, [pc, #80]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d209      	bcs.n	80050ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050da:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b0f      	ldr	r3, [pc, #60]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fe fb4f 	bl	800378a <vListInsert>
}
 80050ec:	e010      	b.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b0a      	ldr	r3, [pc, #40]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fe fb45 	bl	800378a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d202      	bcs.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800510a:	4a08      	ldr	r2, [pc, #32]	@ (800512c <prvAddCurrentTaskToDelayedList+0xa4>)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000dd4 	.word	0x20000dd4
 800511c:	200008fc 	.word	0x200008fc
 8005120:	20000dbc 	.word	0x20000dbc
 8005124:	20000d8c 	.word	0x20000d8c
 8005128:	20000d88 	.word	0x20000d88
 800512c:	20000df0 	.word	0x20000df0

08005130 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	@ 0x28
 8005134:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800513a:	f000 fb13 	bl	8005764 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800513e:	4b1d      	ldr	r3, [pc, #116]	@ (80051b4 <xTimerCreateTimerTask+0x84>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d021      	beq.n	800518a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800514e:	1d3a      	adds	r2, r7, #4
 8005150:	f107 0108 	add.w	r1, r7, #8
 8005154:	f107 030c 	add.w	r3, r7, #12
 8005158:	4618      	mov	r0, r3
 800515a:	f7fe faab 	bl	80036b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	9202      	str	r2, [sp, #8]
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	2302      	movs	r3, #2
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	460a      	mov	r2, r1
 8005170:	4911      	ldr	r1, [pc, #68]	@ (80051b8 <xTimerCreateTimerTask+0x88>)
 8005172:	4812      	ldr	r0, [pc, #72]	@ (80051bc <xTimerCreateTimerTask+0x8c>)
 8005174:	f7ff f8a2 	bl	80042bc <xTaskCreateStatic>
 8005178:	4603      	mov	r3, r0
 800517a:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <xTimerCreateTimerTask+0x90>)
 800517c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800517e:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <xTimerCreateTimerTask+0x90>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051a8:	697b      	ldr	r3, [r7, #20]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000e2c 	.word	0x20000e2c
 80051b8:	08006270 	.word	0x08006270
 80051bc:	080052fd 	.word	0x080052fd
 80051c0:	20000e30 	.word	0x20000e30

080051c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	@ 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051f4:	4b19      	ldr	r3, [pc, #100]	@ (800525c <xTimerGenericCommand+0x98>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02a      	beq.n	8005252 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b05      	cmp	r3, #5
 800520c:	dc18      	bgt.n	8005240 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800520e:	f7ff fead 	bl	8004f6c <xTaskGetSchedulerState>
 8005212:	4603      	mov	r3, r0
 8005214:	2b02      	cmp	r3, #2
 8005216:	d109      	bne.n	800522c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005218:	4b10      	ldr	r3, [pc, #64]	@ (800525c <xTimerGenericCommand+0x98>)
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	f107 0110 	add.w	r1, r7, #16
 8005220:	2300      	movs	r3, #0
 8005222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005224:	f7fe fc5a 	bl	8003adc <xQueueGenericSend>
 8005228:	6278      	str	r0, [r7, #36]	@ 0x24
 800522a:	e012      	b.n	8005252 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <xTimerGenericCommand+0x98>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	f107 0110 	add.w	r1, r7, #16
 8005234:	2300      	movs	r3, #0
 8005236:	2200      	movs	r2, #0
 8005238:	f7fe fc50 	bl	8003adc <xQueueGenericSend>
 800523c:	6278      	str	r0, [r7, #36]	@ 0x24
 800523e:	e008      	b.n	8005252 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005240:	4b06      	ldr	r3, [pc, #24]	@ (800525c <xTimerGenericCommand+0x98>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	f107 0110 	add.w	r1, r7, #16
 8005248:	2300      	movs	r3, #0
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	f7fe fd48 	bl	8003ce0 <xQueueGenericSendFromISR>
 8005250:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	@ 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000e2c 	.word	0x20000e2c

08005260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526a:	4b23      	ldr	r3, [pc, #140]	@ (80052f8 <prvProcessExpiredTimer+0x98>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe fabf 	bl	80037fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d023      	beq.n	80052d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	18d1      	adds	r1, r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	6978      	ldr	r0, [r7, #20]
 800529a:	f000 f8d5 	bl	8005448 <prvInsertTimerInActiveList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a4:	2300      	movs	r3, #0
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	2100      	movs	r1, #0
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	f7ff ff88 	bl	80051c4 <xTimerGenericCommand>
 80052b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d114      	bne.n	80052e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60fb      	str	r3, [r7, #12]
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	6978      	ldr	r0, [r7, #20]
 80052ec:	4798      	blx	r3
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000e24 	.word	0x20000e24

080052fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f859 	bl	80053c0 <prvGetNextExpireTime>
 800530e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4619      	mov	r1, r3
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f805 	bl	8005324 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800531a:	f000 f8d7 	bl	80054cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800531e:	bf00      	nop
 8005320:	e7f0      	b.n	8005304 <prvTimerTask+0x8>
	...

08005324 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800532e:	f7ff fa29 	bl	8004784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f866 	bl	8005408 <prvSampleTimeNow>
 800533c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d130      	bne.n	80053a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <prvProcessTimerOrBlockTask+0x3c>
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	429a      	cmp	r2, r3
 8005350:	d806      	bhi.n	8005360 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005352:	f7ff fa25 	bl	80047a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff81 	bl	8005260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800535e:	e024      	b.n	80053aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005366:	4b13      	ldr	r3, [pc, #76]	@ (80053b4 <prvProcessTimerOrBlockTask+0x90>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <prvProcessTimerOrBlockTask+0x50>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <prvProcessTimerOrBlockTask+0x52>
 8005374:	2300      	movs	r3, #0
 8005376:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005378:	4b0f      	ldr	r3, [pc, #60]	@ (80053b8 <prvProcessTimerOrBlockTask+0x94>)
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	4619      	mov	r1, r3
 8005386:	f7fe ff65 	bl	8004254 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800538a:	f7ff fa09 	bl	80047a0 <xTaskResumeAll>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005394:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <prvProcessTimerOrBlockTask+0x98>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
}
 80053a4:	e001      	b.n	80053aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053a6:	f7ff f9fb 	bl	80047a0 <xTaskResumeAll>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000e28 	.word	0x20000e28
 80053b8:	20000e2c 	.word	0x20000e2c
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <prvGetNextExpireTime+0x44>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <prvGetNextExpireTime+0x16>
 80053d2:	2201      	movs	r2, #1
 80053d4:	e000      	b.n	80053d8 <prvGetNextExpireTime+0x18>
 80053d6:	2200      	movs	r2, #0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053e4:	4b07      	ldr	r3, [pc, #28]	@ (8005404 <prvGetNextExpireTime+0x44>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e001      	b.n	80053f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000e24 	.word	0x20000e24

08005408 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005410:	f7ff fa64 	bl	80048dc <xTaskGetTickCount>
 8005414:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005416:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <prvSampleTimeNow+0x3c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d205      	bcs.n	800542c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005420:	f000 f93a 	bl	8005698 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e002      	b.n	8005432 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005432:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <prvSampleTimeNow+0x3c>)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000e34 	.word	0x20000e34

08005448 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d812      	bhi.n	8005494 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	429a      	cmp	r2, r3
 800547a:	d302      	bcc.n	8005482 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e01b      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005482:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <prvInsertTimerInActiveList+0x7c>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7fe f97c 	bl	800378a <vListInsert>
 8005492:	e012      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d206      	bcs.n	80054aa <prvInsertTimerInActiveList+0x62>
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d302      	bcc.n	80054aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054a4:	2301      	movs	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e007      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054aa:	4b07      	ldr	r3, [pc, #28]	@ (80054c8 <prvInsertTimerInActiveList+0x80>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f7fe f968 	bl	800378a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054ba:	697b      	ldr	r3, [r7, #20]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000e28 	.word	0x20000e28
 80054c8:	20000e24 	.word	0x20000e24

080054cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	@ 0x38
 80054d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054d2:	e0ce      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da19      	bge.n	800550e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	3304      	adds	r3, #4
 80054de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	61fb      	str	r3, [r7, #28]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005504:	6850      	ldr	r0, [r2, #4]
 8005506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005508:	6892      	ldr	r2, [r2, #8]
 800550a:	4611      	mov	r1, r2
 800550c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f2c0 80ae 	blt.w	8005672 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	3304      	adds	r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe f968 	bl	80037fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800552c:	463b      	mov	r3, r7
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff ff6a 	bl	8005408 <prvSampleTimeNow>
 8005534:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b09      	cmp	r3, #9
 800553a:	f200 8097 	bhi.w	800566c <prvProcessReceivedCommands+0x1a0>
 800553e:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <prvProcessReceivedCommands+0x78>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800556d 	.word	0x0800556d
 8005548:	0800556d 	.word	0x0800556d
 800554c:	0800556d 	.word	0x0800556d
 8005550:	080055e3 	.word	0x080055e3
 8005554:	080055f7 	.word	0x080055f7
 8005558:	08005643 	.word	0x08005643
 800555c:	0800556d 	.word	0x0800556d
 8005560:	0800556d 	.word	0x0800556d
 8005564:	080055e3 	.word	0x080055e3
 8005568:	080055f7 	.word	0x080055f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	18d1      	adds	r1, r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800558c:	f7ff ff5c 	bl	8005448 <prvInsertTimerInActiveList>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d06c      	beq.n	8005670 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800559c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d061      	beq.n	8005670 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	441a      	add	r2, r3
 80055b4:	2300      	movs	r3, #0
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	2100      	movs	r1, #0
 80055bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055be:	f7ff fe01 	bl	80051c4 <xTimerGenericCommand>
 80055c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d152      	bne.n	8005670 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	61bb      	str	r3, [r7, #24]
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055f4:	e03d      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005604:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	617b      	str	r3, [r7, #20]
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	e7fd      	b.n	800562a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	18d1      	adds	r1, r2, r3
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800563a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800563c:	f7ff ff04 	bl	8005448 <prvInsertTimerInActiveList>
					break;
 8005640:	e017      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005652:	f000 fbe9 	bl	8005e28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005656:	e00c      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	b2da      	uxtb	r2, r3
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800566a:	e002      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>
					break;
 8005670:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005672:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <prvProcessReceivedCommands+0x1c8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1d39      	adds	r1, r7, #4
 8005678:	2200      	movs	r2, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fbce 	bl	8003e1c <xQueueReceive>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	f47f af26 	bne.w	80054d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3730      	adds	r7, #48	@ 0x30
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000e2c 	.word	0x20000e2c

08005698 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800569e:	e049      	b.n	8005734 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056a0:	4b2e      	ldr	r3, [pc, #184]	@ (800575c <prvSwitchTimerLists+0xc4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056aa:	4b2c      	ldr	r3, [pc, #176]	@ (800575c <prvSwitchTimerLists+0xc4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe f89f 	bl	80037fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d02f      	beq.n	8005734 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d90e      	bls.n	8005704 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056f2:	4b1a      	ldr	r3, [pc, #104]	@ (800575c <prvSwitchTimerLists+0xc4>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fe f844 	bl	800378a <vListInsert>
 8005702:	e017      	b.n	8005734 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005704:	2300      	movs	r3, #0
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	2100      	movs	r1, #0
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff fd58 	bl	80051c4 <xTimerGenericCommand>
 8005714:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	603b      	str	r3, [r7, #0]
}
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005734:	4b09      	ldr	r3, [pc, #36]	@ (800575c <prvSwitchTimerLists+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1b0      	bne.n	80056a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800573e:	4b07      	ldr	r3, [pc, #28]	@ (800575c <prvSwitchTimerLists+0xc4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005744:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <prvSwitchTimerLists+0xc8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a04      	ldr	r2, [pc, #16]	@ (800575c <prvSwitchTimerLists+0xc4>)
 800574a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800574c:	4a04      	ldr	r2, [pc, #16]	@ (8005760 <prvSwitchTimerLists+0xc8>)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6013      	str	r3, [r2, #0]
}
 8005752:	bf00      	nop
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000e24 	.word	0x20000e24
 8005760:	20000e28 	.word	0x20000e28

08005764 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800576a:	f000 f96d 	bl	8005a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800576e:	4b15      	ldr	r3, [pc, #84]	@ (80057c4 <prvCheckForValidListAndQueue+0x60>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d120      	bne.n	80057b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005776:	4814      	ldr	r0, [pc, #80]	@ (80057c8 <prvCheckForValidListAndQueue+0x64>)
 8005778:	f7fd ffb6 	bl	80036e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800577c:	4813      	ldr	r0, [pc, #76]	@ (80057cc <prvCheckForValidListAndQueue+0x68>)
 800577e:	f7fd ffb3 	bl	80036e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005782:	4b13      	ldr	r3, [pc, #76]	@ (80057d0 <prvCheckForValidListAndQueue+0x6c>)
 8005784:	4a10      	ldr	r2, [pc, #64]	@ (80057c8 <prvCheckForValidListAndQueue+0x64>)
 8005786:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005788:	4b12      	ldr	r3, [pc, #72]	@ (80057d4 <prvCheckForValidListAndQueue+0x70>)
 800578a:	4a10      	ldr	r2, [pc, #64]	@ (80057cc <prvCheckForValidListAndQueue+0x68>)
 800578c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800578e:	2300      	movs	r3, #0
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	4b11      	ldr	r3, [pc, #68]	@ (80057d8 <prvCheckForValidListAndQueue+0x74>)
 8005794:	4a11      	ldr	r2, [pc, #68]	@ (80057dc <prvCheckForValidListAndQueue+0x78>)
 8005796:	2110      	movs	r1, #16
 8005798:	200a      	movs	r0, #10
 800579a:	f7fe f8c3 	bl	8003924 <xQueueGenericCreateStatic>
 800579e:	4603      	mov	r3, r0
 80057a0:	4a08      	ldr	r2, [pc, #32]	@ (80057c4 <prvCheckForValidListAndQueue+0x60>)
 80057a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <prvCheckForValidListAndQueue+0x60>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057ac:	4b05      	ldr	r3, [pc, #20]	@ (80057c4 <prvCheckForValidListAndQueue+0x60>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	490b      	ldr	r1, [pc, #44]	@ (80057e0 <prvCheckForValidListAndQueue+0x7c>)
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fd24 	bl	8004200 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057b8:	f000 f978 	bl	8005aac <vPortExitCritical>
}
 80057bc:	bf00      	nop
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000e2c 	.word	0x20000e2c
 80057c8:	20000dfc 	.word	0x20000dfc
 80057cc:	20000e10 	.word	0x20000e10
 80057d0:	20000e24 	.word	0x20000e24
 80057d4:	20000e28 	.word	0x20000e28
 80057d8:	20000ed8 	.word	0x20000ed8
 80057dc:	20000e38 	.word	0x20000e38
 80057e0:	08006278 	.word	0x08006278

080057e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b04      	subs	r3, #4
 80057f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b04      	subs	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f023 0201 	bic.w	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3b04      	subs	r3, #4
 8005812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005814:	4a0c      	ldr	r2, [pc, #48]	@ (8005848 <pxPortInitialiseStack+0x64>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3b14      	subs	r3, #20
 800581e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3b04      	subs	r3, #4
 800582a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f06f 0202 	mvn.w	r2, #2
 8005832:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3b20      	subs	r3, #32
 8005838:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800583a:	68fb      	ldr	r3, [r7, #12]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	0800584d 	.word	0x0800584d

0800584c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005856:	4b13      	ldr	r3, [pc, #76]	@ (80058a4 <prvTaskExitError+0x58>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d00b      	beq.n	8005878 <prvTaskExitError+0x2c>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60fb      	str	r3, [r7, #12]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <prvTaskExitError+0x28>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60bb      	str	r3, [r7, #8]
}
 800588a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800588c:	bf00      	nop
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0fc      	beq.n	800588e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000000c 	.word	0x2000000c
	...

080058b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058b0:	4b07      	ldr	r3, [pc, #28]	@ (80058d0 <pxCurrentTCBConst2>)
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	f380 8809 	msr	PSP, r0
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8811 	msr	BASEPRI, r0
 80058ca:	4770      	bx	lr
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst2>:
 80058d0:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058d8:	4808      	ldr	r0, [pc, #32]	@ (80058fc <prvPortStartFirstTask+0x24>)
 80058da:	6800      	ldr	r0, [r0, #0]
 80058dc:	6800      	ldr	r0, [r0, #0]
 80058de:	f380 8808 	msr	MSP, r0
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f380 8814 	msr	CONTROL, r0
 80058ea:	b662      	cpsie	i
 80058ec:	b661      	cpsie	f
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	df00      	svc	0
 80058f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058fa:	bf00      	nop
 80058fc:	e000ed08 	.word	0xe000ed08

08005900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005906:	4b47      	ldr	r3, [pc, #284]	@ (8005a24 <xPortStartScheduler+0x124>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a47      	ldr	r2, [pc, #284]	@ (8005a28 <xPortStartScheduler+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10b      	bne.n	8005928 <xPortStartScheduler+0x28>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005928:	4b3e      	ldr	r3, [pc, #248]	@ (8005a24 <xPortStartScheduler+0x124>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a2c <xPortStartScheduler+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d10b      	bne.n	800594a <xPortStartScheduler+0x4a>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800594a:	4b39      	ldr	r3, [pc, #228]	@ (8005a30 <xPortStartScheduler+0x130>)
 800594c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	22ff      	movs	r2, #255	@ 0xff
 800595a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800596c:	b2da      	uxtb	r2, r3
 800596e:	4b31      	ldr	r3, [pc, #196]	@ (8005a34 <xPortStartScheduler+0x134>)
 8005970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005972:	4b31      	ldr	r3, [pc, #196]	@ (8005a38 <xPortStartScheduler+0x138>)
 8005974:	2207      	movs	r2, #7
 8005976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005978:	e009      	b.n	800598e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800597a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a38 <xPortStartScheduler+0x138>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3b01      	subs	r3, #1
 8005980:	4a2d      	ldr	r2, [pc, #180]	@ (8005a38 <xPortStartScheduler+0x138>)
 8005982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005996:	2b80      	cmp	r3, #128	@ 0x80
 8005998:	d0ef      	beq.n	800597a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800599a:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <xPortStartScheduler+0x138>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1c3 0307 	rsb	r3, r3, #7
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d00b      	beq.n	80059be <xPortStartScheduler+0xbe>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60bb      	str	r3, [r7, #8]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059be:	4b1e      	ldr	r3, [pc, #120]	@ (8005a38 <xPortStartScheduler+0x138>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <xPortStartScheduler+0x138>)
 80059c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a38 <xPortStartScheduler+0x138>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059d0:	4a19      	ldr	r2, [pc, #100]	@ (8005a38 <xPortStartScheduler+0x138>)
 80059d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059dc:	4b17      	ldr	r3, [pc, #92]	@ (8005a3c <xPortStartScheduler+0x13c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a16      	ldr	r2, [pc, #88]	@ (8005a3c <xPortStartScheduler+0x13c>)
 80059e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059e8:	4b14      	ldr	r3, [pc, #80]	@ (8005a3c <xPortStartScheduler+0x13c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a13      	ldr	r2, [pc, #76]	@ (8005a3c <xPortStartScheduler+0x13c>)
 80059ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059f4:	f000 f8da 	bl	8005bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059f8:	4b11      	ldr	r3, [pc, #68]	@ (8005a40 <xPortStartScheduler+0x140>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059fe:	f000 f8f9 	bl	8005bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a02:	4b10      	ldr	r3, [pc, #64]	@ (8005a44 <xPortStartScheduler+0x144>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a0f      	ldr	r2, [pc, #60]	@ (8005a44 <xPortStartScheduler+0x144>)
 8005a08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a0e:	f7ff ff63 	bl	80058d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a12:	f7ff f82d 	bl	8004a70 <vTaskSwitchContext>
	prvTaskExitError();
 8005a16:	f7ff ff19 	bl	800584c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	e000ed00 	.word	0xe000ed00
 8005a28:	410fc271 	.word	0x410fc271
 8005a2c:	410fc270 	.word	0x410fc270
 8005a30:	e000e400 	.word	0xe000e400
 8005a34:	20000f28 	.word	0x20000f28
 8005a38:	20000f2c 	.word	0x20000f2c
 8005a3c:	e000ed20 	.word	0xe000ed20
 8005a40:	2000000c 	.word	0x2000000c
 8005a44:	e000ef34 	.word	0xe000ef34

08005a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
}
 8005a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <vPortEnterCritical+0x5c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	4a0e      	ldr	r2, [pc, #56]	@ (8005aa4 <vPortEnterCritical+0x5c>)
 8005a6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <vPortEnterCritical+0x5c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d110      	bne.n	8005a96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a74:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa8 <vPortEnterCritical+0x60>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	603b      	str	r3, [r7, #0]
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	e7fd      	b.n	8005a92 <vPortEnterCritical+0x4a>
	}
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ab2:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <vPortExitCritical+0x26>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	607b      	str	r3, [r7, #4]
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <vPortExitCritical+0x50>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	4a08      	ldr	r2, [pc, #32]	@ (8005afc <vPortExitCritical+0x50>)
 8005ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005adc:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <vPortExitCritical+0x50>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <vPortExitCritical+0x44>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f383 8811 	msr	BASEPRI, r3
}
 8005aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	2000000c 	.word	0x2000000c

08005b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b00:	f3ef 8009 	mrs	r0, PSP
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <pxCurrentTCBConst>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f01e 0f10 	tst.w	lr, #16
 8005b10:	bf08      	it	eq
 8005b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1a:	6010      	str	r0, [r2, #0]
 8005b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b24:	f380 8811 	msr	BASEPRI, r0
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f7fe ff9e 	bl	8004a70 <vTaskSwitchContext>
 8005b34:	f04f 0000 	mov.w	r0, #0
 8005b38:	f380 8811 	msr	BASEPRI, r0
 8005b3c:	bc09      	pop	{r0, r3}
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b46:	f01e 0f10 	tst.w	lr, #16
 8005b4a:	bf08      	it	eq
 8005b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b50:	f380 8809 	msr	PSP, r0
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst>:
 8005b60:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b82:	f7fe febb 	bl	80048fc <xTaskIncrementTick>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ba8 <xPortSysTickHandler+0x40>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
}
 8005b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <vPortSetupTimerInterrupt+0x34>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <vPortSetupTimerInterrupt+0x38>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <vPortSetupTimerInterrupt+0x3c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <vPortSetupTimerInterrupt+0x40>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	4a09      	ldr	r2, [pc, #36]	@ (8005bf0 <vPortSetupTimerInterrupt+0x44>)
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bce:	4b04      	ldr	r3, [pc, #16]	@ (8005be0 <vPortSetupTimerInterrupt+0x34>)
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000e010 	.word	0xe000e010
 8005be4:	e000e018 	.word	0xe000e018
 8005be8:	20000000 	.word	0x20000000
 8005bec:	10624dd3 	.word	0x10624dd3
 8005bf0:	e000e014 	.word	0xe000e014

08005bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c04 <vPortEnableVFP+0x10>
 8005bf8:	6801      	ldr	r1, [r0, #0]
 8005bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bfe:	6001      	str	r1, [r0, #0]
 8005c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c02:	bf00      	nop
 8005c04:	e000ed88 	.word	0xe000ed88

08005c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c0e:	f3ef 8305 	mrs	r3, IPSR
 8005c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d915      	bls.n	8005c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c1a:	4a18      	ldr	r2, [pc, #96]	@ (8005c7c <vPortValidateInterruptPriority+0x74>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c24:	4b16      	ldr	r3, [pc, #88]	@ (8005c80 <vPortValidateInterruptPriority+0x78>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	7afa      	ldrb	r2, [r7, #11]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d20b      	bcs.n	8005c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	607b      	str	r3, [r7, #4]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c46:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <vPortValidateInterruptPriority+0x7c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c88 <vPortValidateInterruptPriority+0x80>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d90b      	bls.n	8005c6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <vPortValidateInterruptPriority+0x62>
	}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	e000e3f0 	.word	0xe000e3f0
 8005c80:	20000f28 	.word	0x20000f28
 8005c84:	e000ed0c 	.word	0xe000ed0c
 8005c88:	20000f2c 	.word	0x20000f2c

08005c8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	@ 0x28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c98:	f7fe fd74 	bl	8004784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8005e10 <pvPortMalloc+0x184>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ca4:	f000 f924 	bl	8005ef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e14 <pvPortMalloc+0x188>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 8095 	bne.w	8005de0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01e      	beq.n	8005cfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d015      	beq.n	8005cfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f023 0307 	bic.w	r3, r3, #7
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <pvPortMalloc+0x6e>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	617b      	str	r3, [r7, #20]
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	e7fd      	b.n	8005cf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d06f      	beq.n	8005de0 <pvPortMalloc+0x154>
 8005d00:	4b45      	ldr	r3, [pc, #276]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d86a      	bhi.n	8005de0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d0a:	4b44      	ldr	r3, [pc, #272]	@ (8005e1c <pvPortMalloc+0x190>)
 8005d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d0e:	4b43      	ldr	r3, [pc, #268]	@ (8005e1c <pvPortMalloc+0x190>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d14:	e004      	b.n	8005d20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d903      	bls.n	8005d32 <pvPortMalloc+0xa6>
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f1      	bne.n	8005d16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d32:	4b37      	ldr	r3, [pc, #220]	@ (8005e10 <pvPortMalloc+0x184>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d051      	beq.n	8005de0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2208      	movs	r2, #8
 8005d42:	4413      	add	r3, r2
 8005d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	2308      	movs	r3, #8
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d920      	bls.n	8005da0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <pvPortMalloc+0xfc>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	613b      	str	r3, [r7, #16]
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d9a:	69b8      	ldr	r0, [r7, #24]
 8005d9c:	f000 f90a 	bl	8005fb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005da0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dae:	4b1a      	ldr	r3, [pc, #104]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <pvPortMalloc+0x194>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d203      	bcs.n	8005dc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dba:	4b17      	ldr	r3, [pc, #92]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a18      	ldr	r2, [pc, #96]	@ (8005e20 <pvPortMalloc+0x194>)
 8005dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	4b13      	ldr	r3, [pc, #76]	@ (8005e14 <pvPortMalloc+0x188>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dd6:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <pvPortMalloc+0x198>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	4a11      	ldr	r2, [pc, #68]	@ (8005e24 <pvPortMalloc+0x198>)
 8005dde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005de0:	f7fe fcde 	bl	80047a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <pvPortMalloc+0x17a>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60fb      	str	r3, [r7, #12]
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	e7fd      	b.n	8005e02 <pvPortMalloc+0x176>
	return pvReturn;
 8005e06:	69fb      	ldr	r3, [r7, #28]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3728      	adds	r7, #40	@ 0x28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20004b38 	.word	0x20004b38
 8005e14:	20004b4c 	.word	0x20004b4c
 8005e18:	20004b3c 	.word	0x20004b3c
 8005e1c:	20004b30 	.word	0x20004b30
 8005e20:	20004b40 	.word	0x20004b40
 8005e24:	20004b44 	.word	0x20004b44

08005e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d04f      	beq.n	8005eda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	425b      	negs	r3, r3
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4413      	add	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <vPortFree+0xbc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <vPortFree+0x46>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60fb      	str	r3, [r7, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	e7fd      	b.n	8005e6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <vPortFree+0x66>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	60bb      	str	r3, [r7, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <vPortFree+0xbc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01e      	beq.n	8005eda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11a      	bne.n	8005eda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee4 <vPortFree+0xbc>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	401a      	ands	r2, r3
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005eb4:	f7fe fc66 	bl	8004784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <vPortFree+0xc0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	4a09      	ldr	r2, [pc, #36]	@ (8005ee8 <vPortFree+0xc0>)
 8005ec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ec6:	6938      	ldr	r0, [r7, #16]
 8005ec8:	f000 f874 	bl	8005fb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <vPortFree+0xc4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	4a06      	ldr	r2, [pc, #24]	@ (8005eec <vPortFree+0xc4>)
 8005ed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ed6:	f7fe fc63 	bl	80047a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eda:	bf00      	nop
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20004b4c 	.word	0x20004b4c
 8005ee8:	20004b3c 	.word	0x20004b3c
 8005eec:	20004b48 	.word	0x20004b48

08005ef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ef6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005efa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005efc:	4b27      	ldr	r3, [pc, #156]	@ (8005f9c <prvHeapInit+0xac>)
 8005efe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00c      	beq.n	8005f24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3307      	adds	r3, #7
 8005f0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0307 	bic.w	r3, r3, #7
 8005f16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f9c <prvHeapInit+0xac>)
 8005f20:	4413      	add	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f28:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa0 <prvHeapInit+0xb0>)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa0 <prvHeapInit+0xb0>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4413      	add	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0307 	bic.w	r3, r3, #7
 8005f4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a15      	ldr	r2, [pc, #84]	@ (8005fa4 <prvHeapInit+0xb4>)
 8005f50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f52:	4b14      	ldr	r3, [pc, #80]	@ (8005fa4 <prvHeapInit+0xb4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2200      	movs	r2, #0
 8005f58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f5a:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <prvHeapInit+0xb4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f70:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <prvHeapInit+0xb4>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa8 <prvHeapInit+0xb8>)
 8005f7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4a09      	ldr	r2, [pc, #36]	@ (8005fac <prvHeapInit+0xbc>)
 8005f86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f88:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <prvHeapInit+0xc0>)
 8005f8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	20000f30 	.word	0x20000f30
 8005fa0:	20004b30 	.word	0x20004b30
 8005fa4:	20004b38 	.word	0x20004b38
 8005fa8:	20004b40 	.word	0x20004b40
 8005fac:	20004b3c 	.word	0x20004b3c
 8005fb0:	20004b4c 	.word	0x20004b4c

08005fb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fbc:	4b28      	ldr	r3, [pc, #160]	@ (8006060 <prvInsertBlockIntoFreeList+0xac>)
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e002      	b.n	8005fc8 <prvInsertBlockIntoFreeList+0x14>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d8f7      	bhi.n	8005fc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4413      	add	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d108      	bne.n	8005ff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	441a      	add	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d118      	bne.n	800603c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b15      	ldr	r3, [pc, #84]	@ (8006064 <prvInsertBlockIntoFreeList+0xb0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d00d      	beq.n	8006032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	441a      	add	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e008      	b.n	8006044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006032:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <prvInsertBlockIntoFreeList+0xb0>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e003      	b.n	8006044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	429a      	cmp	r2, r3
 800604a:	d002      	beq.n	8006052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20004b30 	.word	0x20004b30
 8006064:	20004b38 	.word	0x20004b38

08006068 <memset>:
 8006068:	4402      	add	r2, r0
 800606a:	4603      	mov	r3, r0
 800606c:	4293      	cmp	r3, r2
 800606e:	d100      	bne.n	8006072 <memset+0xa>
 8006070:	4770      	bx	lr
 8006072:	f803 1b01 	strb.w	r1, [r3], #1
 8006076:	e7f9      	b.n	800606c <memset+0x4>

08006078 <_reclaim_reent>:
 8006078:	4b29      	ldr	r3, [pc, #164]	@ (8006120 <_reclaim_reent+0xa8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4283      	cmp	r3, r0
 800607e:	b570      	push	{r4, r5, r6, lr}
 8006080:	4604      	mov	r4, r0
 8006082:	d04b      	beq.n	800611c <_reclaim_reent+0xa4>
 8006084:	69c3      	ldr	r3, [r0, #28]
 8006086:	b1ab      	cbz	r3, 80060b4 <_reclaim_reent+0x3c>
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	b16b      	cbz	r3, 80060a8 <_reclaim_reent+0x30>
 800608c:	2500      	movs	r5, #0
 800608e:	69e3      	ldr	r3, [r4, #28]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	5959      	ldr	r1, [r3, r5]
 8006094:	2900      	cmp	r1, #0
 8006096:	d13b      	bne.n	8006110 <_reclaim_reent+0x98>
 8006098:	3504      	adds	r5, #4
 800609a:	2d80      	cmp	r5, #128	@ 0x80
 800609c:	d1f7      	bne.n	800608e <_reclaim_reent+0x16>
 800609e:	69e3      	ldr	r3, [r4, #28]
 80060a0:	4620      	mov	r0, r4
 80060a2:	68d9      	ldr	r1, [r3, #12]
 80060a4:	f000 f872 	bl	800618c <_free_r>
 80060a8:	69e3      	ldr	r3, [r4, #28]
 80060aa:	6819      	ldr	r1, [r3, #0]
 80060ac:	b111      	cbz	r1, 80060b4 <_reclaim_reent+0x3c>
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 f86c 	bl	800618c <_free_r>
 80060b4:	6961      	ldr	r1, [r4, #20]
 80060b6:	b111      	cbz	r1, 80060be <_reclaim_reent+0x46>
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f867 	bl	800618c <_free_r>
 80060be:	69e1      	ldr	r1, [r4, #28]
 80060c0:	b111      	cbz	r1, 80060c8 <_reclaim_reent+0x50>
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 f862 	bl	800618c <_free_r>
 80060c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060ca:	b111      	cbz	r1, 80060d2 <_reclaim_reent+0x5a>
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 f85d 	bl	800618c <_free_r>
 80060d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060d4:	b111      	cbz	r1, 80060dc <_reclaim_reent+0x64>
 80060d6:	4620      	mov	r0, r4
 80060d8:	f000 f858 	bl	800618c <_free_r>
 80060dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80060de:	b111      	cbz	r1, 80060e6 <_reclaim_reent+0x6e>
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 f853 	bl	800618c <_free_r>
 80060e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80060e8:	b111      	cbz	r1, 80060f0 <_reclaim_reent+0x78>
 80060ea:	4620      	mov	r0, r4
 80060ec:	f000 f84e 	bl	800618c <_free_r>
 80060f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80060f2:	b111      	cbz	r1, 80060fa <_reclaim_reent+0x82>
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 f849 	bl	800618c <_free_r>
 80060fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060fc:	b111      	cbz	r1, 8006104 <_reclaim_reent+0x8c>
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 f844 	bl	800618c <_free_r>
 8006104:	6a23      	ldr	r3, [r4, #32]
 8006106:	b14b      	cbz	r3, 800611c <_reclaim_reent+0xa4>
 8006108:	4620      	mov	r0, r4
 800610a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800610e:	4718      	bx	r3
 8006110:	680e      	ldr	r6, [r1, #0]
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f83a 	bl	800618c <_free_r>
 8006118:	4631      	mov	r1, r6
 800611a:	e7bb      	b.n	8006094 <_reclaim_reent+0x1c>
 800611c:	bd70      	pop	{r4, r5, r6, pc}
 800611e:	bf00      	nop
 8006120:	20000010 	.word	0x20000010

08006124 <__libc_init_array>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	4d0d      	ldr	r5, [pc, #52]	@ (800615c <__libc_init_array+0x38>)
 8006128:	4c0d      	ldr	r4, [pc, #52]	@ (8006160 <__libc_init_array+0x3c>)
 800612a:	1b64      	subs	r4, r4, r5
 800612c:	10a4      	asrs	r4, r4, #2
 800612e:	2600      	movs	r6, #0
 8006130:	42a6      	cmp	r6, r4
 8006132:	d109      	bne.n	8006148 <__libc_init_array+0x24>
 8006134:	4d0b      	ldr	r5, [pc, #44]	@ (8006164 <__libc_init_array+0x40>)
 8006136:	4c0c      	ldr	r4, [pc, #48]	@ (8006168 <__libc_init_array+0x44>)
 8006138:	f000 f87e 	bl	8006238 <_init>
 800613c:	1b64      	subs	r4, r4, r5
 800613e:	10a4      	asrs	r4, r4, #2
 8006140:	2600      	movs	r6, #0
 8006142:	42a6      	cmp	r6, r4
 8006144:	d105      	bne.n	8006152 <__libc_init_array+0x2e>
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	f855 3b04 	ldr.w	r3, [r5], #4
 800614c:	4798      	blx	r3
 800614e:	3601      	adds	r6, #1
 8006150:	e7ee      	b.n	8006130 <__libc_init_array+0xc>
 8006152:	f855 3b04 	ldr.w	r3, [r5], #4
 8006156:	4798      	blx	r3
 8006158:	3601      	adds	r6, #1
 800615a:	e7f2      	b.n	8006142 <__libc_init_array+0x1e>
 800615c:	080062a0 	.word	0x080062a0
 8006160:	080062a0 	.word	0x080062a0
 8006164:	080062a0 	.word	0x080062a0
 8006168:	080062a4 	.word	0x080062a4

0800616c <__retarget_lock_acquire_recursive>:
 800616c:	4770      	bx	lr

0800616e <__retarget_lock_release_recursive>:
 800616e:	4770      	bx	lr

08006170 <memcpy>:
 8006170:	440a      	add	r2, r1
 8006172:	4291      	cmp	r1, r2
 8006174:	f100 33ff 	add.w	r3, r0, #4294967295
 8006178:	d100      	bne.n	800617c <memcpy+0xc>
 800617a:	4770      	bx	lr
 800617c:	b510      	push	{r4, lr}
 800617e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006186:	4291      	cmp	r1, r2
 8006188:	d1f9      	bne.n	800617e <memcpy+0xe>
 800618a:	bd10      	pop	{r4, pc}

0800618c <_free_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4605      	mov	r5, r0
 8006190:	2900      	cmp	r1, #0
 8006192:	d041      	beq.n	8006218 <_free_r+0x8c>
 8006194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006198:	1f0c      	subs	r4, r1, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfb8      	it	lt
 800619e:	18e4      	addlt	r4, r4, r3
 80061a0:	f000 f83e 	bl	8006220 <__malloc_lock>
 80061a4:	4a1d      	ldr	r2, [pc, #116]	@ (800621c <_free_r+0x90>)
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	b933      	cbnz	r3, 80061b8 <_free_r+0x2c>
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	6014      	str	r4, [r2, #0]
 80061ae:	4628      	mov	r0, r5
 80061b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b4:	f000 b83a 	b.w	800622c <__malloc_unlock>
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d908      	bls.n	80061ce <_free_r+0x42>
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	1821      	adds	r1, r4, r0
 80061c0:	428b      	cmp	r3, r1
 80061c2:	bf01      	itttt	eq
 80061c4:	6819      	ldreq	r1, [r3, #0]
 80061c6:	685b      	ldreq	r3, [r3, #4]
 80061c8:	1809      	addeq	r1, r1, r0
 80061ca:	6021      	streq	r1, [r4, #0]
 80061cc:	e7ed      	b.n	80061aa <_free_r+0x1e>
 80061ce:	461a      	mov	r2, r3
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	b10b      	cbz	r3, 80061d8 <_free_r+0x4c>
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d9fa      	bls.n	80061ce <_free_r+0x42>
 80061d8:	6811      	ldr	r1, [r2, #0]
 80061da:	1850      	adds	r0, r2, r1
 80061dc:	42a0      	cmp	r0, r4
 80061de:	d10b      	bne.n	80061f8 <_free_r+0x6c>
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	4401      	add	r1, r0
 80061e4:	1850      	adds	r0, r2, r1
 80061e6:	4283      	cmp	r3, r0
 80061e8:	6011      	str	r1, [r2, #0]
 80061ea:	d1e0      	bne.n	80061ae <_free_r+0x22>
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	6053      	str	r3, [r2, #4]
 80061f2:	4408      	add	r0, r1
 80061f4:	6010      	str	r0, [r2, #0]
 80061f6:	e7da      	b.n	80061ae <_free_r+0x22>
 80061f8:	d902      	bls.n	8006200 <_free_r+0x74>
 80061fa:	230c      	movs	r3, #12
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	e7d6      	b.n	80061ae <_free_r+0x22>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	1821      	adds	r1, r4, r0
 8006204:	428b      	cmp	r3, r1
 8006206:	bf04      	itt	eq
 8006208:	6819      	ldreq	r1, [r3, #0]
 800620a:	685b      	ldreq	r3, [r3, #4]
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	bf04      	itt	eq
 8006210:	1809      	addeq	r1, r1, r0
 8006212:	6021      	streq	r1, [r4, #0]
 8006214:	6054      	str	r4, [r2, #4]
 8006216:	e7ca      	b.n	80061ae <_free_r+0x22>
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	20004c8c 	.word	0x20004c8c

08006220 <__malloc_lock>:
 8006220:	4801      	ldr	r0, [pc, #4]	@ (8006228 <__malloc_lock+0x8>)
 8006222:	f7ff bfa3 	b.w	800616c <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	20004c88 	.word	0x20004c88

0800622c <__malloc_unlock>:
 800622c:	4801      	ldr	r0, [pc, #4]	@ (8006234 <__malloc_unlock+0x8>)
 800622e:	f7ff bf9e 	b.w	800616e <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	20004c88 	.word	0x20004c88

08006238 <_init>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr

08006244 <_fini>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr
